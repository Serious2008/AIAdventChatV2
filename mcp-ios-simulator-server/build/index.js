import { Server } from "@modelcontextprotocol/sdk/server/index.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import { CallToolRequestSchema, ListToolsRequestSchema, } from "@modelcontextprotocol/sdk/types.js";
import { exec } from "child_process";
import { promisify } from "util";
const execAsync = promisify(exec);
// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–∏–º—É–ª—è—Ç–æ—Ä–æ–≤
async function listSimulators() {
    try {
        const { stdout } = await execAsync('xcrun simctl list devices available --json');
        const data = JSON.parse(stdout);
        const simulators = [];
        for (const [runtime, devices] of Object.entries(data.devices)) {
            if (Array.isArray(devices)) {
                for (const device of devices) {
                    simulators.push({
                        udid: device.udid,
                        name: device.name,
                        state: device.state,
                        runtime: runtime.replace('com.apple.CoreSimulator.SimRuntime.', ''),
                        deviceType: device.deviceTypeIdentifier.split('.').pop() || 'Unknown'
                    });
                }
            }
        }
        return simulators;
    }
    catch (error) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∏–º—É–ª—è—Ç–æ—Ä–æ–≤: ${error.message}`);
    }
}
// –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ç–æ—Ä
async function bootSimulator(udidOrName) {
    try {
        console.error(`üîç –ò—â—É —Å–∏–º—É–ª—è—Ç–æ—Ä: ${udidOrName}`);
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å–∏–º—É–ª—è—Ç–æ—Ä –ø–æ –∏–º–µ–Ω–∏
        const simulators = await listSimulators();
        let targetUdid = udidOrName;
        const simByName = simulators.find(s => s.name.toLowerCase().includes(udidOrName.toLowerCase()));
        if (simByName) {
            console.error(`‚úÖ –ù–∞–π–¥–µ–Ω —Å–∏–º—É–ª—è—Ç–æ—Ä –ø–æ –∏–º–µ–Ω–∏: ${simByName.name} (${simByName.udid})`);
            targetUdid = simByName.udid;
        }
        else {
            console.error(`‚ö†Ô∏è –°–∏–º—É–ª—è—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –∏–º–µ–Ω–∏, –ø—Ä–æ–±—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ UDID`);
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        const currentSim = simulators.find(s => s.udid === targetUdid);
        if (currentSim && currentSim.state === "Booted") {
            console.error(`‚ÑπÔ∏è –°–∏–º—É–ª—è—Ç–æ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω`);
            return `‚úÖ –°–∏–º—É–ª—è—Ç–æ—Ä "${currentSim.name}" —É–∂–µ –∑–∞–ø—É—â–µ–Ω`;
        }
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ç–æ—Ä
        console.error(`üöÄ –ó–∞–ø—É—Å–∫–∞—é —Å–∏–º—É–ª—è—Ç–æ—Ä: xcrun simctl boot ${targetUdid}`);
        await execAsync(`xcrun simctl boot ${targetUdid}`);
        console.error(`‚úÖ –°–∏–º—É–ª—è—Ç–æ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω`);
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º Simulator.app –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        console.error(`üì± –û—Ç–∫—Ä—ã–≤–∞—é Simulator.app`);
        await execAsync('open -a Simulator');
        console.error(`‚úÖ Simulator.app –æ—Ç–∫—Ä—ã—Ç`);
        return `‚úÖ –°–∏–º—É–ª—è—Ç–æ—Ä "${currentSim?.name || targetUdid}" —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω`;
    }
    catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞: ${error.message}`);
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ç–æ—Ä: ${error.message}`);
    }
}
// –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏–º—É–ª—è—Ç–æ—Ä
async function shutdownSimulator(udidOrName) {
    try {
        const simulators = await listSimulators();
        let targetUdid = udidOrName;
        const simByName = simulators.find(s => s.name.toLowerCase().includes(udidOrName.toLowerCase()));
        if (simByName) {
            targetUdid = simByName.udid;
        }
        const currentSim = simulators.find(s => s.udid === targetUdid);
        if (currentSim && currentSim.state === "Shutdown") {
            return `‚úÖ –°–∏–º—É–ª—è—Ç–æ—Ä "${currentSim.name}" —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`;
        }
        await execAsync(`xcrun simctl shutdown ${targetUdid}`);
        return `‚úÖ –°–∏–º—É–ª—è—Ç–æ—Ä "${currentSim?.name || targetUdid}" —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`;
    }
    catch (error) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏–º—É–ª—è—Ç–æ—Ä: ${error.message}`);
    }
}
// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
async function installApp(udidOrName, appPath) {
    try {
        const simulators = await listSimulators();
        let targetUdid = udidOrName;
        const simByName = simulators.find(s => s.name.toLowerCase().includes(udidOrName.toLowerCase()));
        if (simByName) {
            targetUdid = simByName.udid;
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∏–º—É–ª—è—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω
        const currentSim = simulators.find(s => s.udid === targetUdid);
        if (currentSim && currentSim.state !== "Booted") {
            throw new Error(`–°–∏–º—É–ª—è—Ç–æ—Ä "${currentSim.name}" –Ω–µ –∑–∞–ø—É—â–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π boot_simulator`);
        }
        await execAsync(`xcrun simctl install ${targetUdid} "${appPath}"`);
        return `‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä "${currentSim?.name || targetUdid}"`;
    }
    catch (error) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: ${error.message}`);
    }
}
// –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
async function launchApp(udidOrName, bundleId) {
    try {
        const simulators = await listSimulators();
        let targetUdid = udidOrName;
        const simByName = simulators.find(s => s.name.toLowerCase().includes(udidOrName.toLowerCase()));
        if (simByName) {
            targetUdid = simByName.udid;
        }
        const currentSim = simulators.find(s => s.udid === targetUdid);
        if (currentSim && currentSim.state !== "Booted") {
            throw new Error(`–°–∏–º—É–ª—è—Ç–æ—Ä "${currentSim.name}" –Ω–µ –∑–∞–ø—É—â–µ–Ω`);
        }
        await execAsync(`xcrun simctl launch ${targetUdid} ${bundleId}`);
        return `‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ${bundleId} –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä–µ "${currentSim?.name || targetUdid}"`;
    }
    catch (error) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: ${error.message}`);
    }
}
// –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç
async function takeScreenshot(udidOrName, outputPath) {
    try {
        const simulators = await listSimulators();
        let targetUdid = udidOrName;
        const simByName = simulators.find(s => s.name.toLowerCase().includes(udidOrName.toLowerCase()));
        if (simByName) {
            targetUdid = simByName.udid;
        }
        const currentSim = simulators.find(s => s.udid === targetUdid);
        if (currentSim && currentSim.state !== "Booted") {
            throw new Error(`–°–∏–º—É–ª—è—Ç–æ—Ä "${currentSim.name}" –Ω–µ –∑–∞–ø—É—â–µ–Ω`);
        }
        const timestamp = Date.now();
        const filename = outputPath || `~/Desktop/simulator_screenshot_${timestamp}.png`;
        await execAsync(`xcrun simctl io ${targetUdid} screenshot "${filename}"`);
        return `‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ${filename}`;
    }
    catch (error) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç: ${error.message}`);
    }
}
// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
async function getAppInfo(udidOrName) {
    try {
        const simulators = await listSimulators();
        let targetUdid = udidOrName;
        const simByName = simulators.find(s => s.name.toLowerCase().includes(udidOrName.toLowerCase()));
        if (simByName) {
            targetUdid = simByName.udid;
        }
        const { stdout } = await execAsync(`xcrun simctl listapps ${targetUdid}`);
        return stdout;
    }
    catch (error) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: ${error.message}`);
    }
}
const server = new Server({
    name: "mcp-ios-simulator-server",
    version: "1.0.0",
}, {
    capabilities: {
        tools: {},
    },
});
server.setRequestHandler(ListToolsRequestSchema, async () => {
    return {
        tools: [
            {
                name: "list_simulators",
                description: "–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö iOS —Å–∏–º—É–ª—è—Ç–æ—Ä–æ–≤. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–º—è, —Å–æ—Å—Ç–æ—è–Ω–∏–µ (Booted/Shutdown), –≤–µ—Ä—Å–∏—é iOS –∏ UDID.",
                inputSchema: {
                    type: "object",
                    properties: {},
                    required: [],
                },
            },
            {
                name: "boot_simulator",
                description: "–ó–∞–ø—É—Å—Ç–∏—Ç—å iOS —Å–∏–º—É–ª—è—Ç–æ—Ä. –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å UDID –∏–ª–∏ –∏–º—è —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'iPhone 16 Pro'). –°–∏–º—É–ª—è—Ç–æ—Ä –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤–∏–∑—É–∞–ª—å–Ω–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Simulator.",
                inputSchema: {
                    type: "object",
                    properties: {
                        simulator: {
                            type: "string",
                            description: "UDID –∏–ª–∏ –∏–º—è —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'iPhone 16 Pro', '69DC7937-8A37-4122-A0DC-C1B795FC00F7')",
                        },
                    },
                    required: ["simulator"],
                },
            },
            {
                name: "shutdown_simulator",
                description: "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å iOS —Å–∏–º—É–ª—è—Ç–æ—Ä. –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å UDID –∏–ª–∏ –∏–º—è.",
                inputSchema: {
                    type: "object",
                    properties: {
                        simulator: {
                            type: "string",
                            description: "UDID –∏–ª–∏ –∏–º—è —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏",
                        },
                    },
                    required: ["simulator"],
                },
            },
            {
                name: "install_app",
                description: "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å .app —Ñ–∞–π–ª –Ω–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä. –°–∏–º—É–ª—è—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω. –ü—É—Ç—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—ã–º –¥–æ .app bundle.",
                inputSchema: {
                    type: "object",
                    properties: {
                        simulator: {
                            type: "string",
                            description: "UDID –∏–ª–∏ –∏–º—è —Å–∏–º—É–ª—è—Ç–æ—Ä–∞",
                        },
                        app_path: {
                            type: "string",
                            description: "–ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ .app bundle (–Ω–∞–ø—Ä–∏–º–µ—Ä: '/Users/user/Library/Developer/Xcode/DerivedData/.../MyApp.app')",
                        },
                    },
                    required: ["simulator", "app_path"],
                },
            },
            {
                name: "launch_app",
                description: "–ó–∞–ø—É—Å—Ç–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä–µ. –°–∏–º—É–ª—è—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.",
                inputSchema: {
                    type: "object",
                    properties: {
                        simulator: {
                            type: "string",
                            description: "UDID –∏–ª–∏ –∏–º—è —Å–∏–º—É–ª—è—Ç–æ—Ä–∞",
                        },
                        bundle_id: {
                            type: "string",
                            description: "Bundle Identifier –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'com.example.MyApp')",
                        },
                    },
                    required: ["simulator", "bundle_id"],
                },
            },
            {
                name: "take_screenshot",
                description: "–°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞. –°–∏–º—É–ª—è—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –Ω–∞ Desktop.",
                inputSchema: {
                    type: "object",
                    properties: {
                        simulator: {
                            type: "string",
                            description: "UDID –∏–ª–∏ –∏–º—è —Å–∏–º—É–ª—è—Ç–æ—Ä–∞",
                        },
                        output_path: {
                            type: "string",
                            description: "–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ~/Desktop/simulator_screenshot_[timestamp].png)",
                        },
                    },
                    required: ["simulator"],
                },
            },
            {
                name: "list_apps",
                description: "–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä–µ —Å –∏—Ö Bundle IDs.",
                inputSchema: {
                    type: "object",
                    properties: {
                        simulator: {
                            type: "string",
                            description: "UDID –∏–ª–∏ –∏–º—è —Å–∏–º—É–ª—è—Ç–æ—Ä–∞",
                        },
                    },
                    required: ["simulator"],
                },
            },
        ],
    };
});
server.setRequestHandler(CallToolRequestSchema, async (request) => {
    try {
        switch (request.params.name) {
            case "list_simulators": {
                const simulators = await listSimulators();
                const formatted = simulators.map(s => `üì± ${s.name}\n   UDID: ${s.udid}\n   –°–æ—Å—Ç–æ—è–Ω–∏–µ: ${s.state}\n   –í–µ—Ä—Å–∏—è: ${s.runtime}\n`).join('\n');
                return {
                    content: [
                        {
                            type: "text",
                            text: `–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º—É–ª—è—Ç–æ—Ä—ã (${simulators.length}):\n\n${formatted}`,
                        },
                    ],
                };
            }
            case "boot_simulator": {
                const simulator = request.params.arguments?.simulator;
                if (!simulator) {
                    return {
                        content: [
                            {
                                type: "text",
                                text: "–û—à–∏–±–∫–∞: –ø–∞—Ä–∞–º–µ—Ç—Ä 'simulator' –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω",
                            },
                        ],
                    };
                }
                const result = await bootSimulator(simulator);
                return {
                    content: [
                        {
                            type: "text",
                            text: result,
                        },
                    ],
                };
            }
            case "shutdown_simulator": {
                const simulator = request.params.arguments?.simulator;
                if (!simulator) {
                    return {
                        content: [
                            {
                                type: "text",
                                text: "–û—à–∏–±–∫–∞: –ø–∞—Ä–∞–º–µ—Ç—Ä 'simulator' –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω",
                            },
                        ],
                    };
                }
                const result = await shutdownSimulator(simulator);
                return {
                    content: [
                        {
                            type: "text",
                            text: result,
                        },
                    ],
                };
            }
            case "install_app": {
                const simulator = request.params.arguments?.simulator;
                const appPath = request.params.arguments?.app_path;
                if (!simulator || !appPath) {
                    return {
                        content: [
                            {
                                type: "text",
                                text: "–û—à–∏–±–∫–∞: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã 'simulator' –∏ 'app_path' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã",
                            },
                        ],
                    };
                }
                const result = await installApp(simulator, appPath);
                return {
                    content: [
                        {
                            type: "text",
                            text: result,
                        },
                    ],
                };
            }
            case "launch_app": {
                const simulator = request.params.arguments?.simulator;
                const bundleId = request.params.arguments?.bundle_id;
                if (!simulator || !bundleId) {
                    return {
                        content: [
                            {
                                type: "text",
                                text: "–û—à–∏–±–∫–∞: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã 'simulator' –∏ 'bundle_id' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã",
                            },
                        ],
                    };
                }
                const result = await launchApp(simulator, bundleId);
                return {
                    content: [
                        {
                            type: "text",
                            text: result,
                        },
                    ],
                };
            }
            case "take_screenshot": {
                const simulator = request.params.arguments?.simulator;
                const outputPath = request.params.arguments?.output_path;
                if (!simulator) {
                    return {
                        content: [
                            {
                                type: "text",
                                text: "–û—à–∏–±–∫–∞: –ø–∞—Ä–∞–º–µ—Ç—Ä 'simulator' –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω",
                            },
                        ],
                    };
                }
                const result = await takeScreenshot(simulator, outputPath);
                return {
                    content: [
                        {
                            type: "text",
                            text: result,
                        },
                    ],
                };
            }
            case "list_apps": {
                const simulator = request.params.arguments?.simulator;
                if (!simulator) {
                    return {
                        content: [
                            {
                                type: "text",
                                text: "–û—à–∏–±–∫–∞: –ø–∞—Ä–∞–º–µ—Ç—Ä 'simulator' –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω",
                            },
                        ],
                    };
                }
                const result = await getAppInfo(simulator);
                return {
                    content: [
                        {
                            type: "text",
                            text: result,
                        },
                    ],
                };
            }
            default:
                return {
                    content: [
                        {
                            type: "text",
                            text: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: ${request.params.name}`,
                        },
                    ],
                };
        }
    }
    catch (error) {
        return {
            content: [
                {
                    type: "text",
                    text: `–û—à–∏–±–∫–∞: ${error.message}`,
                },
            ],
        };
    }
});
async function main() {
    const transport = new StdioServerTransport();
    await server.connect(transport);
    console.error("MCP iOS Simulator Server running on stdio");
}
main().catch((error) => {
    console.error("Fatal error:", error);
    process.exit(1);
});
