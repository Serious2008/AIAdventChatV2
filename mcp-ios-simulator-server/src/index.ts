import { Server } from "@modelcontextprotocol/sdk/server/index.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import {
  CallToolRequestSchema,
  ListToolsRequestSchema,
} from "@modelcontextprotocol/sdk/types.js";
import { execSync, exec } from "child_process";
import { promisify } from "util";

const execAsync = promisify(exec);

// –¢–∏–ø—ã –¥–ª—è —Å–∏–º—É–ª—è—Ç–æ—Ä–∞
interface Simulator {
  udid: string;
  name: string;
  state: string;
  runtime: string;
  deviceType: string;
}

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–∏–º—É–ª—è—Ç–æ—Ä–æ–≤
async function listSimulators(): Promise<Simulator[]> {
  try {
    const { stdout } = await execAsync('xcrun simctl list devices available --json');
    const data = JSON.parse(stdout);

    const simulators: Simulator[] = [];

    for (const [runtime, devices] of Object.entries(data.devices)) {
      if (Array.isArray(devices)) {
        for (const device of devices) {
          simulators.push({
            udid: device.udid,
            name: device.name,
            state: device.state,
            runtime: runtime.replace('com.apple.CoreSimulator.SimRuntime.', ''),
            deviceType: device.deviceTypeIdentifier.split('.').pop() || 'Unknown'
          });
        }
      }
    }

    return simulators;
  } catch (error: any) {
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∏–º—É–ª—è—Ç–æ—Ä–æ–≤: ${error.message}`);
  }
}

// –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ç–æ—Ä
async function bootSimulator(udidOrName: string): Promise<string> {
  try {
    console.error(`üîç –ò—â—É —Å–∏–º—É–ª—è—Ç–æ—Ä: ${udidOrName}`);

    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å–∏–º—É–ª—è—Ç–æ—Ä –ø–æ –∏–º–µ–Ω–∏
    const simulators = await listSimulators();
    let targetUdid = udidOrName;

    const simByName = simulators.find(s => s.name.toLowerCase().includes(udidOrName.toLowerCase()));
    if (simByName) {
      console.error(`‚úÖ –ù–∞–π–¥–µ–Ω —Å–∏–º—É–ª—è—Ç–æ—Ä –ø–æ –∏–º–µ–Ω–∏: ${simByName.name} (${simByName.udid})`);
      targetUdid = simByName.udid;
    } else {
      console.error(`‚ö†Ô∏è –°–∏–º—É–ª—è—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –∏–º–µ–Ω–∏, –ø—Ä–æ–±—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ UDID`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    const currentSim = simulators.find(s => s.udid === targetUdid);
    if (currentSim && currentSim.state === "Booted") {
      console.error(`‚ÑπÔ∏è –°–∏–º—É–ª—è—Ç–æ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω`);
      return `‚úÖ –°–∏–º—É–ª—è—Ç–æ—Ä "${currentSim.name}" —É–∂–µ –∑–∞–ø—É—â–µ–Ω`;
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ç–æ—Ä
    console.error(`üöÄ –ó–∞–ø—É—Å–∫–∞—é —Å–∏–º—É–ª—è—Ç–æ—Ä: xcrun simctl boot ${targetUdid}`);
    await execAsync(`xcrun simctl boot ${targetUdid}`);
    console.error(`‚úÖ –°–∏–º—É–ª—è—Ç–æ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω`);

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º Simulator.app –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    console.error(`üì± –û—Ç–∫—Ä—ã–≤–∞—é Simulator.app`);
    await execAsync('open -a Simulator');
    console.error(`‚úÖ Simulator.app –æ—Ç–∫—Ä—ã—Ç`);

    return `‚úÖ –°–∏–º—É–ª—è—Ç–æ—Ä "${currentSim?.name || targetUdid}" —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω`;
  } catch (error: any) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞: ${error.message}`);
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ç–æ—Ä: ${error.message}`);
  }
}

// –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏–º—É–ª—è—Ç–æ—Ä
async function shutdownSimulator(udidOrName: string): Promise<string> {
  try {
    console.error(`üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–∏–º—É–ª—è—Ç–æ—Ä: ${udidOrName}`);

    const simulators = await listSimulators();
    let targetUdid = udidOrName;

    const simByName = simulators.find(s => s.name.toLowerCase().includes(udidOrName.toLowerCase()));
    if (simByName) {
      console.error(`‚úÖ –ù–∞–π–¥–µ–Ω —Å–∏–º—É–ª—è—Ç–æ—Ä –ø–æ –∏–º–µ–Ω–∏: ${simByName.name} (${simByName.udid})`);
      targetUdid = simByName.udid;
    }

    const currentSim = simulators.find(s => s.udid === targetUdid);
    if (currentSim && currentSim.state === "Shutdown") {
      console.error(`‚ÑπÔ∏è –°–∏–º—É–ª—è—Ç–æ—Ä —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
      return `‚úÖ –°–∏–º—É–ª—è—Ç–æ—Ä "${currentSim.name}" —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`;
    }

    console.error(`üõë –í—ã–∫–ª—é—á–∞—é —Å–∏–º—É–ª—è—Ç–æ—Ä: xcrun simctl shutdown ${targetUdid}`);
    await execAsync(`xcrun simctl shutdown ${targetUdid}`);
    console.error(`‚úÖ –°–∏–º—É–ª—è—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ —Å–∏–º—É–ª—è—Ç–æ—Ä—ã
    const updatedSimulators = await listSimulators();
    const bootedSimulators = updatedSimulators.filter(s => s.state === "Booted");
    const hasBootedSimulators = bootedSimulators.length > 0;

    if (!hasBootedSimulators) {
      // –ï—Å–ª–∏ –≤—Å–µ —Å–∏–º—É–ª—è—Ç–æ—Ä—ã –≤—ã–∫–ª—é—á–µ–Ω—ã, –∑–∞–∫—Ä—ã–≤–∞–µ–º Simulator.app
      console.error(`üî¥ –í—Å–µ —Å–∏–º—É–ª—è—Ç–æ—Ä—ã –≤—ã–∫–ª—é—á–µ–Ω—ã, –∑–∞–∫—Ä—ã–≤–∞—é Simulator.app`);
      try {
        await execAsync('killall Simulator');
        console.error(`‚úÖ Simulator.app –∑–∞–∫—Ä—ã—Ç`);
        return `‚úÖ –°–∏–º—É–ª—è—Ç–æ—Ä "${currentSim?.name || targetUdid}" –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—Å–µ —Å–∏–º—É–ª—è—Ç–æ—Ä—ã –≤—ã–∫–ª—é—á–µ–Ω—ã, Simulator.app –∑–∞–∫—Ä—ã—Ç.`;
      } catch (killError) {
        // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –µ—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–æ
        console.error(`‚ÑπÔ∏è Simulator.app —É–∂–µ –∑–∞–∫—Ä—ã—Ç –∏–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω`);
        return `‚úÖ –°–∏–º—É–ª—è—Ç–æ—Ä "${currentSim?.name || targetUdid}" –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. Simulator.app –±—ã–ª —É–∂–µ –∑–∞–∫—Ä—ã—Ç.`;
      }
    } else {
      console.error(`‚ÑπÔ∏è –û—Å—Ç–∞–ª–∏—Å—å –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ —Å–∏–º—É–ª—è—Ç–æ—Ä—ã (${bootedSimulators.length}), –æ—Å—Ç–∞–≤–ª—è—é Simulator.app –æ—Ç–∫—Ä—ã—Ç—ã–º`);
      const bootedNames = bootedSimulators.map(s => s.name).join(', ');
      return `‚úÖ –°–∏–º—É–ª—è—Ç–æ—Ä "${currentSim?.name || targetUdid}" –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. Simulator.app –æ—Å—Ç–∞—ë—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º (—Ä–∞–±–æ—Ç–∞—é—Ç: ${bootedNames})`;
    }
  } catch (error: any) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞: ${error.message}`);
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏–º—É–ª—è—Ç–æ—Ä: ${error.message}`);
  }
}

// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
async function installApp(udidOrName: string, appPath: string): Promise<string> {
  try {
    const simulators = await listSimulators();
    let targetUdid = udidOrName;

    const simByName = simulators.find(s => s.name.toLowerCase().includes(udidOrName.toLowerCase()));
    if (simByName) {
      targetUdid = simByName.udid;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–∏–º—É–ª—è—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω
    const currentSim = simulators.find(s => s.udid === targetUdid);
    if (currentSim && currentSim.state !== "Booted") {
      throw new Error(`–°–∏–º—É–ª—è—Ç–æ—Ä "${currentSim.name}" –Ω–µ –∑–∞–ø—É—â–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π boot_simulator`);
    }

    await execAsync(`xcrun simctl install ${targetUdid} "${appPath}"`);

    return `‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä "${currentSim?.name || targetUdid}"`;
  } catch (error: any) {
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: ${error.message}`);
  }
}

// –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
async function launchApp(udidOrName: string, bundleId: string): Promise<string> {
  try {
    const simulators = await listSimulators();
    let targetUdid = udidOrName;

    const simByName = simulators.find(s => s.name.toLowerCase().includes(udidOrName.toLowerCase()));
    if (simByName) {
      targetUdid = simByName.udid;
    }

    const currentSim = simulators.find(s => s.udid === targetUdid);
    if (currentSim && currentSim.state !== "Booted") {
      throw new Error(`–°–∏–º—É–ª—è—Ç–æ—Ä "${currentSim.name}" –Ω–µ –∑–∞–ø—É—â–µ–Ω`);
    }

    await execAsync(`xcrun simctl launch ${targetUdid} ${bundleId}`);

    return `‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ${bundleId} –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä–µ "${currentSim?.name || targetUdid}"`;
  } catch (error: any) {
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: ${error.message}`);
  }
}

// –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç
async function takeScreenshot(udidOrName: string, outputPath?: string): Promise<string> {
  try {
    const simulators = await listSimulators();
    let targetUdid = udidOrName;

    const simByName = simulators.find(s => s.name.toLowerCase().includes(udidOrName.toLowerCase()));
    if (simByName) {
      targetUdid = simByName.udid;
    }

    const currentSim = simulators.find(s => s.udid === targetUdid);
    if (currentSim && currentSim.state !== "Booted") {
      throw new Error(`–°–∏–º—É–ª—è—Ç–æ—Ä "${currentSim.name}" –Ω–µ –∑–∞–ø—É—â–µ–Ω`);
    }

    const timestamp = Date.now();
    const filename = outputPath || `~/Desktop/simulator_screenshot_${timestamp}.png`;

    await execAsync(`xcrun simctl io ${targetUdid} screenshot "${filename}"`);

    return `‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ${filename}`;
  } catch (error: any) {
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç: ${error.message}`);
  }
}

// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
async function getAppInfo(udidOrName: string): Promise<string> {
  try {
    console.error(`üìã –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è: ${udidOrName}`);

    const simulators = await listSimulators();
    let targetUdid = udidOrName;
    let simName = udidOrName;

    const simByName = simulators.find(s => s.name.toLowerCase().includes(udidOrName.toLowerCase()));
    if (simByName) {
      console.error(`‚úÖ –ù–∞–π–¥–µ–Ω —Å–∏–º—É–ª—è—Ç–æ—Ä: ${simByName.name} (${simByName.udid})`);
      targetUdid = simByName.udid;
      simName = simByName.name;
    }

    console.error(`üîç –í—ã–ø–æ–ª–Ω—è—é: xcrun simctl listapps ${targetUdid}`);
    const { stdout } = await execAsync(`xcrun simctl listapps ${targetUdid}`);

    // –ü–∞—Ä—Å–∏–º plist –≤—ã–≤–æ–¥ –¥–ª—è –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
    console.error(`üìä –ü–∞—Ä—Å—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç...`);

    // –ò–∑–≤–ª–µ–∫–∞–µ–º Bundle IDs –∏–∑ –≤—ã–≤–æ–¥–∞
    const bundleIdRegex = /"([^"]+)"\s*=/g;
    const matches = [...stdout.matchAll(bundleIdRegex)];
    const bundleIds = matches.map(m => m[1]);

    // –ò–∑–≤–ª–µ–∫–∞–µ–º CFBundleDisplayName –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const apps: Array<{bundleId: string, displayName: string, type: string}> = [];

    for (const bundleId of bundleIds) {
      // –ù–∞—Ö–æ–¥–∏–º –±–ª–æ–∫ —ç—Ç–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      const appBlockRegex = new RegExp(`"${bundleId.replace(/\./g, '\\.')}"\\s*=\\s*{([^}]+)}`, 's');
      const appBlock = stdout.match(appBlockRegex);

      if (appBlock) {
        const block = appBlock[1];

        // –ò–∑–≤–ª–µ–∫–∞–µ–º CFBundleDisplayName
        const displayNameMatch = block.match(/CFBundleDisplayName\s*=\s*([^;]+);/);
        const displayName = displayNameMatch ? displayNameMatch[1].trim() : bundleId;

        // –ò–∑–≤–ª–µ–∫–∞–µ–º ApplicationType
        const typeMatch = block.match(/ApplicationType\s*=\s*([^;]+);/);
        const type = typeMatch ? typeMatch[1].trim() : 'Unknown';

        apps.push({ bundleId, displayName, type });
      }
    }

    // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ
    const systemApps = apps.filter(a => a.type === 'System');
    const userApps = apps.filter(a => a.type === 'User');

    console.error(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: ${apps.length} (${systemApps.length} —Å–∏—Å—Ç–µ–º–Ω—ã—Ö, ${userApps.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö)`);

    let result = `üì± –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä–µ "${simName}":\n\n`;

    if (userApps.length > 0) {
      result += `üë§ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø (${userApps.length}):\n`;
      userApps.forEach(app => {
        result += `  ‚Ä¢ ${app.displayName}\n`;
        result += `    Bundle ID: ${app.bundleId}\n`;
      });
      result += '\n';
    }

    result += `üçé –°–ò–°–¢–ï–ú–ù–´–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø (${systemApps.length}):\n`;
    systemApps.forEach(app => {
      result += `  ‚Ä¢ ${app.displayName}\n`;
      result += `    Bundle ID: ${app.bundleId}\n`;
    });

    return result;
  } catch (error: any) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: ${error.message}`);
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: ${error.message}`);
  }
}

const server = new Server(
  {
    name: "mcp-ios-simulator-server",
    version: "1.0.0",
  },
  {
    capabilities: {
      tools: {},
    },
  }
);

server.setRequestHandler(ListToolsRequestSchema, async () => {
  return {
    tools: [
      {
        name: "list_simulators",
        description: "–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö iOS —Å–∏–º—É–ª—è—Ç–æ—Ä–æ–≤. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–º—è, —Å–æ—Å—Ç–æ—è–Ω–∏–µ (Booted/Shutdown), –≤–µ—Ä—Å–∏—é iOS –∏ UDID.",
        inputSchema: {
          type: "object",
          properties: {},
          required: [],
        },
      },
      {
        name: "boot_simulator",
        description: "–ó–∞–ø—É—Å—Ç–∏—Ç—å iOS —Å–∏–º—É–ª—è—Ç–æ—Ä. –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å UDID –∏–ª–∏ –∏–º—è —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'iPhone 16 Pro'). –°–∏–º—É–ª—è—Ç–æ—Ä –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤–∏–∑—É–∞–ª—å–Ω–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Simulator.",
        inputSchema: {
          type: "object",
          properties: {
            simulator: {
              type: "string",
              description: "UDID –∏–ª–∏ –∏–º—è —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'iPhone 16 Pro', '69DC7937-8A37-4122-A0DC-C1B795FC00F7')",
            },
          },
          required: ["simulator"],
        },
      },
      {
        name: "shutdown_simulator",
        description: "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å iOS —Å–∏–º—É–ª—è—Ç–æ—Ä. –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å UDID –∏–ª–∏ –∏–º—è. –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —Å–∏–º—É–ª—è—Ç–æ—Ä, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä–æ–µ—Ç—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Simulator.app.",
        inputSchema: {
          type: "object",
          properties: {
            simulator: {
              type: "string",
              description: "UDID –∏–ª–∏ –∏–º—è —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏",
            },
          },
          required: ["simulator"],
        },
      },
      {
        name: "install_app",
        description: "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å .app —Ñ–∞–π–ª –Ω–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä. –°–∏–º—É–ª—è—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω. –ü—É—Ç—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—ã–º –¥–æ .app bundle.",
        inputSchema: {
          type: "object",
          properties: {
            simulator: {
              type: "string",
              description: "UDID –∏–ª–∏ –∏–º—è —Å–∏–º—É–ª—è—Ç–æ—Ä–∞",
            },
            app_path: {
              type: "string",
              description: "–ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ .app bundle (–Ω–∞–ø—Ä–∏–º–µ—Ä: '/Users/user/Library/Developer/Xcode/DerivedData/.../MyApp.app')",
            },
          },
          required: ["simulator", "app_path"],
        },
      },
      {
        name: "launch_app",
        description: "–ó–∞–ø—É—Å—Ç–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä–µ. –°–∏–º—É–ª—è—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.",
        inputSchema: {
          type: "object",
          properties: {
            simulator: {
              type: "string",
              description: "UDID –∏–ª–∏ –∏–º—è —Å–∏–º—É–ª—è—Ç–æ—Ä–∞",
            },
            bundle_id: {
              type: "string",
              description: "Bundle Identifier –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'com.example.MyApp')",
            },
          },
          required: ["simulator", "bundle_id"],
        },
      },
      {
        name: "take_screenshot",
        description: "–°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞. –°–∏–º—É–ª—è—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –Ω–∞ Desktop.",
        inputSchema: {
          type: "object",
          properties: {
            simulator: {
              type: "string",
              description: "UDID –∏–ª–∏ –∏–º—è —Å–∏–º—É–ª—è—Ç–æ—Ä–∞",
            },
            output_path: {
              type: "string",
              description: "–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ~/Desktop/simulator_screenshot_[timestamp].png)",
            },
          },
          required: ["simulator"],
        },
      },
      {
        name: "list_apps",
        description: "–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä–µ —Å –∏—Ö Bundle IDs.",
        inputSchema: {
          type: "object",
          properties: {
            simulator: {
              type: "string",
              description: "UDID –∏–ª–∏ –∏–º—è —Å–∏–º—É–ª—è—Ç–æ—Ä–∞",
            },
          },
          required: ["simulator"],
        },
      },
    ],
  };
});

server.setRequestHandler(CallToolRequestSchema, async (request) => {
  try {
    switch (request.params.name) {
      case "list_simulators": {
        const simulators = await listSimulators();
        const formatted = simulators.map(s =>
          `üì± ${s.name}\n   UDID: ${s.udid}\n   –°–æ—Å—Ç–æ—è–Ω–∏–µ: ${s.state}\n   –í–µ—Ä—Å–∏—è: ${s.runtime}\n`
        ).join('\n');

        return {
          content: [
            {
              type: "text",
              text: `–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º—É–ª—è—Ç–æ—Ä—ã (${simulators.length}):\n\n${formatted}`,
            },
          ],
        };
      }

      case "boot_simulator": {
        const simulator = request.params.arguments?.simulator as string;
        if (!simulator) {
          return {
            content: [
              {
                type: "text",
                text: "–û—à–∏–±–∫–∞: –ø–∞—Ä–∞–º–µ—Ç—Ä 'simulator' –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω",
              },
            ],
          };
        }

        const result = await bootSimulator(simulator);
        return {
          content: [
            {
              type: "text",
              text: result,
            },
          ],
        };
      }

      case "shutdown_simulator": {
        const simulator = request.params.arguments?.simulator as string;
        if (!simulator) {
          return {
            content: [
              {
                type: "text",
                text: "–û—à–∏–±–∫–∞: –ø–∞—Ä–∞–º–µ—Ç—Ä 'simulator' –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω",
              },
            ],
          };
        }

        const result = await shutdownSimulator(simulator);
        return {
          content: [
            {
              type: "text",
              text: result,
            },
          ],
        };
      }

      case "install_app": {
        const simulator = request.params.arguments?.simulator as string;
        const appPath = request.params.arguments?.app_path as string;

        if (!simulator || !appPath) {
          return {
            content: [
              {
                type: "text",
                text: "–û—à–∏–±–∫–∞: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã 'simulator' –∏ 'app_path' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã",
              },
            ],
          };
        }

        const result = await installApp(simulator, appPath);
        return {
          content: [
            {
              type: "text",
              text: result,
            },
          ],
        };
      }

      case "launch_app": {
        const simulator = request.params.arguments?.simulator as string;
        const bundleId = request.params.arguments?.bundle_id as string;

        if (!simulator || !bundleId) {
          return {
            content: [
              {
                type: "text",
                text: "–û—à–∏–±–∫–∞: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã 'simulator' –∏ 'bundle_id' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã",
              },
            ],
          };
        }

        const result = await launchApp(simulator, bundleId);
        return {
          content: [
            {
              type: "text",
              text: result,
            },
          ],
        };
      }

      case "take_screenshot": {
        const simulator = request.params.arguments?.simulator as string;
        const outputPath = request.params.arguments?.output_path as string;

        if (!simulator) {
          return {
            content: [
              {
                type: "text",
                text: "–û—à–∏–±–∫–∞: –ø–∞—Ä–∞–º–µ—Ç—Ä 'simulator' –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω",
              },
            ],
          };
        }

        const result = await takeScreenshot(simulator, outputPath);
        return {
          content: [
            {
              type: "text",
              text: result,
            },
          ],
        };
      }

      case "list_apps": {
        const simulator = request.params.arguments?.simulator as string;

        if (!simulator) {
          return {
            content: [
              {
                type: "text",
                text: "–û—à–∏–±–∫–∞: –ø–∞—Ä–∞–º–µ—Ç—Ä 'simulator' –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω",
              },
            ],
          };
        }

        const result = await getAppInfo(simulator);
        return {
          content: [
            {
              type: "text",
              text: result,
            },
          ],
        };
      }

      default:
        return {
          content: [
            {
              type: "text",
              text: `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: ${request.params.name}`,
            },
          ],
        };
    }
  } catch (error: any) {
    return {
      content: [
        {
          type: "text",
          text: `–û—à–∏–±–∫–∞: ${error.message}`,
        },
      ],
    };
  }
});

async function main() {
  const transport = new StdioServerTransport();
  await server.connect(transport);
  console.error("MCP iOS Simulator Server running on stdio");
}

main().catch((error) => {
  console.error("Fatal error:", error);
  process.exit(1);
});
