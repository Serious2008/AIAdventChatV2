import Foundation
import Combine
import MCP

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è iOS —Å–∏–º—É–ª—è—Ç–æ—Ä–æ–º —á–µ—Ä–µ–∑ MCP
class SimulatorService: ObservableObject {
    @Published var isConnected = false

    private let mcpService: MCPService
    private let simulatorServerPath: String

    init() {
        self.mcpService = MCPService()

        // –ü—É—Ç—å –∫ MCP iOS Simulator Server (–∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å)
        self.simulatorServerPath = "/Users/sergeymarkov/Documents/PetProject/AIAdventChatV2/mcp-ios-simulator-server/build/index.js"

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MCP –∫–ª–∏–µ–Ω—Ç
        mcpService.initializeClient()
        print("‚úÖ MCP Client –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ SimulatorService.init()")
        print("üìÅ –ü—É—Ç—å –∫ MCP —Å–µ—Ä–≤–µ—Ä—É: \(simulatorServerPath)")

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        let fileManager = FileManager.default
        if fileManager.fileExists(atPath: simulatorServerPath) {
            print("‚úÖ MCP —Å–µ—Ä–≤–µ—Ä –Ω–∞–π–¥–µ–Ω: \(simulatorServerPath)")
        } else {
            print("‚ùå MCP —Å–µ—Ä–≤–µ—Ä –ù–ï –Ω–∞–π–¥–µ–Ω: \(simulatorServerPath)")
        }
    }

    deinit {
        print("üßπ SimulatorService –¥–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è, –æ—á–∏—â–∞—é —Ä–µ—Å—É—Ä—Å—ã...")
        Task {
            await mcpService.disconnect()
            print("‚úÖ MCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        }
    }

    /// –í—ã–∑–≤–∞—Ç—å MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
    func callSimulatorTool(
        name: String,
        arguments: [String: MCP.Value]
    ) async throws -> MCPToolResult {
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
        if !mcpService.isConnected {
            print("üîå –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ MCP iOS Simulator Server...")

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ node (–∏–∑ NVM)
            let nodePath = "/Users/sergeymarkov/.nvm/versions/node/v22.18.0/bin/node"
            print("üìÇ –ö–æ–º–∞–Ω–¥–∞: \(nodePath) \(simulatorServerPath)")

            try await mcpService.connect(serverCommand: [nodePath, simulatorServerPath])
            print("‚úÖ –ü–æ–¥–∫–ª—é—á—ë–Ω –∫ MCP iOS Simulator Server")
            isConnected = true
        }

        print("üîß –í—ã–∑—ã–≤–∞—é MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: \(name)")
        print("üìä –ê—Ä–≥—É–º–µ–Ω—Ç—ã: \(arguments)")
        let result = try await mcpService.callTool(name: name, arguments: arguments)
        print("‚úÖ MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω: \(name)")
        print("üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç: \(result)")

        return result
    }

    /// –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    func disconnect() async {
        if mcpService.isConnected {
            await mcpService.disconnect()
            isConnected = false
        }
    }
}
