import Foundation
import Combine
import MCP

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏
class PeriodicTaskService: ObservableObject {
    @Published var activeTasks: [PeriodicTask] = []

    private var timers: [UUID: Timer] = [:]
    weak var chatViewModel: ChatViewModel?
    private let mcpService: MCPService
    private let weatherServerPath: String

    init() {
        self.mcpService = MCPService()

        // –ü—É—Ç—å –∫ MCP Weather Server
        let projectPath = FileManager.default.currentDirectoryPath
        self.weatherServerPath = "\(projectPath)/mcp-weather-server/build/index.js"

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        loadTasks()
    }

    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É
    func createTask(
        action: String,
        parameters: [String: String],
        intervalMinutes: Int
    ) -> UUID {
        let task = PeriodicTask(
            action: action,
            parameters: parameters,
            intervalMinutes: intervalMinutes
        )

        activeTasks.append(task)
        saveTasks()

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
        scheduleTask(task)

        // –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ä–∞–∑—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º executeTaskById —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
        Task {
            await executeTaskById(task.id)
        }

        return task.id
    }

    /// –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É
    func stopTask(id: UUID) {
        print("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∑–∞–¥–∞—á—É \(id)")

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        if let timer = timers[id] {
            timer.invalidate()
            timers.removeValue(forKey: id)
            print("‚úÖ Timer –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —É–¥–∞–ª—ë–Ω –¥–ª—è –∑–∞–¥–∞—á–∏ \(id)")
        } else {
            print("‚ö†Ô∏è Timer –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∑–∞–¥–∞—á–∏ \(id)")
        }

        // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É
        if let index = activeTasks.firstIndex(where: { $0.id == id }) {
            activeTasks[index].isActive = false
            saveTasks()
            print("‚úÖ –ó–∞–¥–∞—á–∞ \(id) –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            print("üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –æ—Å—Ç–∞–ª–æ—Å—å: \(activeTasks.filter { $0.isActive }.count)")
        } else {
            print("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ \(id) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ activeTasks")
        }
    }

    /// –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
    func deleteTask(id: UUID) {
        stopTask(id: id)
        activeTasks.removeAll(where: { $0.id == id })
        saveTasks()
    }

    /// –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    private func scheduleTask(_ task: PeriodicTask) {
        guard task.isActive else { return }

        let interval = TimeInterval(task.intervalMinutes * 60)

        print("‚è∞ –ü–ª–∞–Ω–∏—Ä—É—é –∑–∞–¥–∞—á—É \(task.id) —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º \(interval) —Å–µ–∫—É–Ω–¥ (\(task.intervalMinutes) –º–∏–Ω—É—Ç)")

        let timer = Timer(timeInterval: interval, repeats: true) { [weak self] _ in
            print("‚è∞ Timer —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è –∑–∞–¥–∞—á–∏ \(task.id)")
            Task {
                await self?.executeTaskById(task.id)
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º timer –≤ main RunLoop —Å —Ä–µ–∂–∏–º–æ–º common
        RunLoop.main.add(timer, forMode: .common)

        timers[task.id] = timer

        print("‚úÖ Timer —Å–æ–∑–¥–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ RunLoop –¥–ª—è –∑–∞–¥–∞—á–∏ \(task.id)")
    }

    /// –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ ID
    private func executeTaskById(_ taskId: UUID) async {
        guard let task = activeTasks.first(where: { $0.id == taskId && $0.isActive }) else {
            print("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ \(taskId) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞")
            return
        }

        print("üöÄ –í—ã–ø–æ–ª–Ω—è—é –∑–∞–¥–∞—á—É \(taskId): \(task.action) —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ \(task.parameters)")
        await executeTask(task)
    }

    /// –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É
    private func executeTask(_ task: PeriodicTask) async {
        print("üìã –ù–∞—á–∏–Ω–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ \(task.id)")

        do {
            // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ MCP
            print("üîß –í—ã–∑—ã–≤–∞—é MCP tool: \(task.action)")
            let result = try await executeMCPTool(
                action: task.action,
                parameters: task.parameters
            )
            print("‚úÖ MCP tool –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç: \(result.prefix(100))...")

            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
            if let index = activeTasks.firstIndex(where: { $0.id == task.id }) {
                await MainActor.run {
                    activeTasks[index].executionCount += 1
                    print("üìä –°—á—ë—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π –∑–∞–¥–∞—á–∏ \(task.id): \(activeTasks[index].executionCount)")
                }
            }

            // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —á–∞—Ç
            print("üí¨ –î–æ–±–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —á–∞—Ç")
            await addResultToChat(result: result, task: task)
            print("‚úÖ –ó–∞–¥–∞—á–∞ \(task.id) —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")

        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ \(task.id): \(error.localizedDescription)")
            // –î–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –≤ —á–∞—Ç
            await addResultToChat(
                result: "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: \(error.localizedDescription)",
                task: task
            )
        }
    }

    /// –í—ã–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —á–µ—Ä–µ–∑ MCP
    private func executeMCPTool(
        action: String,
        parameters: [String: String]
    ) async throws -> String {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
        guard ProcessInfo.processInfo.environment["OPENWEATHER_API_KEY"] != nil else {
            throw NSError(
                domain: "PeriodicTaskService",
                code: 1,
                userInfo: [NSLocalizedDescriptionKey: "OPENWEATHER_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Xcode Scheme –∏–ª–∏ –≤ ~/.zshrc"]
            )
        }

        // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç, —Å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        do {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            mcpService.initializeClient()

            // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
            if !mcpService.isConnected {
                print("üîå –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ MCP Weather Server...")
                try await mcpService.connect(serverCommand: ["node", weatherServerPath])
                print("‚úÖ –ü–æ–¥–∫–ª—é—á—ë–Ω –∫ MCP Weather Server")
            }

            // –í—ã–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
            print("üìû –í—ã–∑—ã–≤–∞—é MCP tool: \(action) —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: \(parameters)")
            let arguments = parameters.mapValues { MCP.Value.string($0) }
            let result = try await mcpService.callTool(
                name: action,
                arguments: arguments
            )

            // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            return extractText(from: result.content)

        } catch {
            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ "Client connection not initialized" - –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
            if error.localizedDescription.contains("Client connection not initialized") ||
               error.localizedDescription.contains("not initialized") {
                print("‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ: \(error.localizedDescription)")
                print("üîÑ –ü—Ä–æ–±—É—é –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...")

                // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                await mcpService.disconnect()

                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
                mcpService.initializeClient()
                try await mcpService.connect(serverCommand: ["node", weatherServerPath])
                print("‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ MCP Weather Server")

                // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                print("üîÑ –ü–æ–≤—Ç–æ—Ä—è—é –≤—ã–∑–æ–≤ MCP tool: \(action)")
                let arguments = parameters.mapValues { MCP.Value.string($0) }
                let result = try await mcpService.callTool(
                    name: action,
                    arguments: arguments
                )

                return extractText(from: result.content)
            }

            // –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ - –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
            print("‚ùå –û—à–∏–±–∫–∞ MCP tool: \(error.localizedDescription)")
            throw error
        }
    }

    /// –ò–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ MCP –æ—Ç–≤–µ—Ç–∞
    private func extractText(from content: [MCP.Tool.Content]) -> String {
        return content.compactMap { item in
            if case .text(let text) = item {
                return text
            }
            return nil
        }.joined(separator: "\n")
    }

    /// –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —á–∞—Ç
    private func addResultToChat(result: String, task: PeriodicTask) async {
        print("üí¨ addResultToChat –≤—ã–∑–≤–∞–Ω –¥–ª—è –∑–∞–¥–∞—á–∏ \(task.id)")

        await MainActor.run {
            guard let chatViewModel = chatViewModel else {
                print("‚ö†Ô∏è chatViewModel is nil!")
                return
            }

            print("‚úÖ chatViewModel –¥–æ—Å—Ç—É–ø–µ–Ω, —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: \(chatViewModel.messages.count)")

            // –°–æ–∑–¥–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ—Ç–∫–æ–π –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏
            let cityName = task.parameters["city"] ?? "Unknown"
            let timestamp = Date().formatted(date: .omitted, time: .shortened)
            let header = "ü§ñ –ü–æ–≥–æ–¥–Ω—ã–π –∞–≥–µ–Ω—Ç ‚Ä¢ \(timestamp) ‚Ä¢ \(cityName)"
            let content = "\(header)\n\n\(result)"

            let message = Message(content: content, isFromUser: false)
            chatViewModel.messages.append(message)

            print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç. –ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: \(chatViewModel.messages.count)")
        }
    }

    // MARK: - Persistence

    private func saveTasks() {
        if let encoded = try? JSONEncoder().encode(activeTasks) {
            UserDefaults.standard.set(encoded, forKey: "periodicTasks")
        }
    }

    private func loadTasks() {
        guard let data = UserDefaults.standard.data(forKey: "periodicTasks"),
              let tasks = try? JSONDecoder().decode([PeriodicTask].self, from: data) else {
            return
        }

        activeTasks = tasks

        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        for task in tasks where task.isActive {
            scheduleTask(task)
        }
    }
}
