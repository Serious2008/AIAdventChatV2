import Foundation
import Combine
import MCP

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏
class PeriodicTaskService: ObservableObject {
    @Published var activeTasks: [PeriodicTask] = []

    private var timers: [UUID: Timer] = [:]
    weak var chatViewModel: ChatViewModel?
    private let mcpService: MCPService
    private let weatherServerPath: String

    init() {
        self.mcpService = MCPService()

        // –ü—É—Ç—å –∫ MCP Weather Server
        let projectPath = FileManager.default.currentDirectoryPath
        self.weatherServerPath = "\(projectPath)/mcp-weather-server/build/index.js"

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        loadTasks()
    }

    /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É
    func createTask(
        action: String,
        parameters: [String: String],
        intervalMinutes: Int
    ) -> UUID {
        let task = PeriodicTask(
            action: action,
            parameters: parameters,
            intervalMinutes: intervalMinutes
        )

        activeTasks.append(task)
        saveTasks()

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
        scheduleTask(task)

        // –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ä–∞–∑—É
        Task {
            await executeTask(task)
        }

        return task.id
    }

    /// –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É
    func stopTask(id: UUID) {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
        timers[id]?.invalidate()
        timers.removeValue(forKey: id)

        // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É
        if let index = activeTasks.firstIndex(where: { $0.id == id }) {
            activeTasks[index].isActive = false
            saveTasks()
        }
    }

    /// –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
    func deleteTask(id: UUID) {
        stopTask(id: id)
        activeTasks.removeAll(where: { $0.id == id })
        saveTasks()
    }

    /// –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    private func scheduleTask(_ task: PeriodicTask) {
        guard task.isActive else { return }

        let interval = TimeInterval(task.intervalMinutes * 60)

        let timer = Timer.scheduledTimer(
            withTimeInterval: interval,
            repeats: true
        ) { [weak self] _ in
            Task {
                await self?.executeTask(task)
            }
        }

        timers[task.id] = timer
    }

    /// –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É
    private func executeTask(_ task: PeriodicTask) async {
        do {
            // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ MCP
            let result = try await executeMCPTool(
                action: task.action,
                parameters: task.parameters
            )

            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
            if let index = activeTasks.firstIndex(where: { $0.id == task.id }) {
                await MainActor.run {
                    activeTasks[index].executionCount += 1
                }
            }

            // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —á–∞—Ç
            await addResultToChat(result: result, task: task)

        } catch {
            // –î–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –≤ —á–∞—Ç
            await addResultToChat(
                result: "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: \(error.localizedDescription)",
                task: task
            )
        }
    }

    /// –í—ã–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —á–µ—Ä–µ–∑ MCP
    private func executeMCPTool(
        action: String,
        parameters: [String: String]
    ) async throws -> String {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MCP –∫–ª–∏–µ–Ω—Ç
        mcpService.initializeClient()

        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ weather server –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
        if !mcpService.isConnected {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            guard ProcessInfo.processInfo.environment["OPENWEATHER_API_KEY"] != nil else {
                throw NSError(
                    domain: "PeriodicTaskService",
                    code: 1,
                    userInfo: [NSLocalizedDescriptionKey: "OPENWEATHER_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Xcode Scheme –∏–ª–∏ –≤ ~/.zshrc"]
                )
            }

            try await mcpService.connect(serverCommand: ["node", weatherServerPath])
        }

        // –í—ã–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        let arguments = parameters.mapValues { MCP.Value.string($0) }
        let result = try await mcpService.callTool(
            name: action,
            arguments: arguments
        )

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        return extractText(from: result.content)
    }

    /// –ò–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ MCP –æ—Ç–≤–µ—Ç–∞
    private func extractText(from content: [MCP.Tool.Content]) -> String {
        return content.compactMap { item in
            if case .text(let text) = item {
                return text
            }
            return nil
        }.joined(separator: "\n")
    }

    /// –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —á–∞—Ç
    private func addResultToChat(result: String, task: PeriodicTask) async {
        await MainActor.run {
            guard let chatViewModel = chatViewModel else { return }

            // –°–æ–∑–¥–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ—Ç–∫–æ–π –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏
            let cityName = task.parameters["city"] ?? "Unknown"
            let timestamp = Date().formatted(date: .omitted, time: .shortened)
            let header = "ü§ñ –ü–æ–≥–æ–¥–Ω—ã–π –∞–≥–µ–Ω—Ç ‚Ä¢ \(timestamp) ‚Ä¢ \(cityName)"
            let content = "\(header)\n\n\(result)"

            let message = Message(content: content, isFromUser: false)
            chatViewModel.messages.append(message)
        }
    }

    // MARK: - Persistence

    private func saveTasks() {
        if let encoded = try? JSONEncoder().encode(activeTasks) {
            UserDefaults.standard.set(encoded, forKey: "periodicTasks")
        }
    }

    private func loadTasks() {
        guard let data = UserDefaults.standard.data(forKey: "periodicTasks"),
              let tasks = try? JSONDecoder().decode([PeriodicTask].self, from: data) else {
            return
        }

        activeTasks = tasks

        // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        for task in tasks where task.isActive {
            scheduleTask(task)
        }
    }
}
