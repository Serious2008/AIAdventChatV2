//
//  HuggingFaceService.swift
//  AIAdventChatV2
//
//  Created by Claude on 01.10.2025.
//

import Foundation

// Response format for new chat completions API
struct HuggingFaceChatResponse: Codable {
    let choices: [Choice]
    let usage: Usage?

    struct Choice: Codable {
        let message: Message

        struct Message: Codable {
            let content: String
        }
    }

    struct Usage: Codable {
        let prompt_tokens: Int?
        let completion_tokens: Int?
        let total_tokens: Int?
    }
}

struct ModelMetrics {
    let responseTime: TimeInterval
    let inputTokens: Int?
    let outputTokens: Int?
    let totalCost: Double?
    let modelName: String
}

class HuggingFaceService {

    // –ú–æ–¥–µ–ª–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π Inference Providers API
    static let availableModels = [
        // –ú–∞–ª–µ–Ω—å–∫–∏–µ –º–æ–¥–µ–ª–∏
        "katanemo/Arch-Router-1.5B",
        "microsoft/phi-2",

        // –°—Ä–µ–¥–Ω–∏–µ –º–æ–¥–µ–ª–∏
        "meta-llama/Llama-3.1-8B-Instruct",
        "mistralai/Mistral-7B-Instruct-v0.3",

        // –ë–æ–ª—å—à–∏–µ –º–æ–¥–µ–ª–∏
        "deepseek-ai/DeepSeek-V3-0324",
        "Qwen/Qwen2.5-72B-Instruct"
    ]

    func sendRequest(
        model: String,
        message: String,
        apiKey: String,
        temperature: Double,
        completion: @escaping (Result<(String, ModelMetrics), Error>) -> Void
    ) {
        let startTime = Date()

        guard let url = URL(string: "https://router.huggingface.co/v1/chat/completions") else {
            completion(.failure(NSError(domain: "HuggingFaceService", code: -1, userInfo: [NSLocalizedDescriptionKey: "–ù–µ–≤–µ—Ä–Ω—ã–π URL"])))
            return
        }

        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.setValue("Bearer \(apiKey)", forHTTPHeaderField: "Authorization")
        request.timeoutInterval = 60.0

        // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ - chat completions (–∫–∞–∫ OpenAI)
        let requestBody: [String: Any] = [
            "model": model,
            "messages": [
                [
                    "role": "user",
                    "content": message
                ]
            ],
            "temperature": min(temperature, 1.0),
            "max_tokens": 500
        ]

        do {
            request.httpBody = try JSONSerialization.data(withJSONObject: requestBody)
        } catch {
            completion(.failure(error))
            return
        }

        URLSession.shared.dataTask(with: request) { data, response, error in
            let responseTime = Date().timeIntervalSince(startTime)

            if let error = error {
                completion(.failure(error))
                return
            }

            guard let data = data else {
                completion(.failure(NSError(domain: "HuggingFaceService", code: -2, userInfo: [NSLocalizedDescriptionKey: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"])))
                return
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP —Å—Ç–∞—Ç—É—Å
            if let httpResponse = response as? HTTPURLResponse {
                print("üìä HuggingFace HTTP Status: \(httpResponse.statusCode)")
                print("üìä Request URL: \(httpResponse.url?.absoluteString ?? "unknown")")
                if let responseString = String(data: data, encoding: .utf8) {
                    print("üìä Response Body: \(responseString)")
                }

                if httpResponse.statusCode == 503 {
                    completion(.failure(NSError(domain: "HuggingFaceService", code: -6, userInfo: [NSLocalizedDescriptionKey: "–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥."])))
                    return
                }

                if httpResponse.statusCode == 404 {
                    completion(.failure(NSError(domain: "HuggingFaceService", code: -7, userInfo: [NSLocalizedDescriptionKey: "–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ Inference API."])))
                    return
                }

                if httpResponse.statusCode == 403 {
                    completion(.failure(NSError(domain: "HuggingFaceService", code: -8, userInfo: [NSLocalizedDescriptionKey: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –∏–ª–∏ –º–æ–¥–µ–ª—å —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Å—Ç—É–ø–∞."])))
                    return
                }

                if httpResponse.statusCode >= 400 {
                    if let responseString = String(data: data, encoding: .utf8) {
                        completion(.failure(NSError(domain: "HuggingFaceService", code: httpResponse.statusCode, userInfo: [NSLocalizedDescriptionKey: "–û—à–∏–±–∫–∞ API (\(httpResponse.statusCode)): \(responseString)"])))
                    } else {
                        completion(.failure(NSError(domain: "HuggingFaceService", code: httpResponse.statusCode, userInfo: [NSLocalizedDescriptionKey: "–û—à–∏–±–∫–∞ API: \(httpResponse.statusCode)"])))
                    }
                    return
                }
            }

            // –ü–∞—Ä—Å–∏–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (chat completions)
            do {
                let chatResponse = try JSONDecoder().decode(HuggingFaceChatResponse.self, from: data)

                if let firstChoice = chatResponse.choices.first {
                    let text = firstChoice.message.content

                    let metrics = ModelMetrics(
                        responseTime: responseTime,
                        inputTokens: chatResponse.usage?.prompt_tokens ?? self.estimateTokens(message),
                        outputTokens: chatResponse.usage?.completion_tokens ?? self.estimateTokens(text),
                        totalCost: 0.0,
                        modelName: model
                    )
                    completion(.success((text, metrics)))
                    return
                }

                completion(.failure(NSError(domain: "HuggingFaceService", code: -5, userInfo: [NSLocalizedDescriptionKey: "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏"])))
            } catch {
                // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É
                if let responseString = String(data: data, encoding: .utf8) {
                    completion(.failure(NSError(domain: "HuggingFaceService", code: -5, userInfo: [NSLocalizedDescriptionKey: "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: \(error.localizedDescription)\n–û—Ç–≤–µ—Ç: \(responseString)"])))
                } else {
                    completion(.failure(NSError(domain: "HuggingFaceService", code: -5, userInfo: [NSLocalizedDescriptionKey: "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç: \(error.localizedDescription)"])))
                }
            }
        }.resume()
    }

    // –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ (–ø—Ä–∏–º–µ—Ä–Ω–æ 4 —Å–∏–º–≤–æ–ª–∞ = 1 —Ç–æ–∫–µ–Ω)
    private func estimateTokens(_ text: String) -> Int {
        return text.count / 4
    }

    // –†–∞–∑–±–∏–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞–Ω–∫–∏ —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –æ–∫–Ω–∞
    private func splitIntoChunks(_ text: String, maxChunkSize: Int = 6000) -> [String] {
        // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        let sentences = text.components(separatedBy: CharacterSet(charactersIn: ".!?\n"))
        var chunks: [String] = []
        var currentChunk = ""

        for sentence in sentences {
            let trimmedSentence = sentence.trimmingCharacters(in: .whitespacesAndNewlines)
            if trimmedSentence.isEmpty { continue }

            let sentenceWithPunctuation = trimmedSentence + "."

            // –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø—Ä–µ–≤—ã—Å–∏—Ç —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞
            if (currentChunk.count + sentenceWithPunctuation.count) > maxChunkSize {
                if !currentChunk.isEmpty {
                    chunks.append(currentChunk.trimmingCharacters(in: .whitespacesAndNewlines))
                    currentChunk = ""
                }

                // –ï—Å–ª–∏ —Å–∞–º–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±–æ–ª—å—à–µ maxChunkSize, –¥–µ–ª–∏–º –µ–≥–æ
                if sentenceWithPunctuation.count > maxChunkSize {
                    let words = sentenceWithPunctuation.components(separatedBy: " ")
                    var wordChunk = ""
                    for word in words {
                        if (wordChunk.count + word.count + 1) > maxChunkSize {
                            if !wordChunk.isEmpty {
                                chunks.append(wordChunk.trimmingCharacters(in: .whitespacesAndNewlines))
                            }
                            wordChunk = word + " "
                        } else {
                            wordChunk += word + " "
                        }
                    }
                    if !wordChunk.isEmpty {
                        currentChunk = wordChunk
                    }
                } else {
                    currentChunk = sentenceWithPunctuation + " "
                }
            } else {
                currentChunk += sentenceWithPunctuation + " "
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫
        if !currentChunk.isEmpty {
            chunks.append(currentChunk.trimmingCharacters(in: .whitespacesAndNewlines))
        }

        return chunks
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ Claude (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Sequential Chunking)
    func summarize(
        text: String,
        apiKey: String,
        progressCallback: ((String) -> Void)? = nil,
        completion: @escaping (Result<String, Error>) -> Void
    ) {
        // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ (–ø—Ä–∏–º–µ—Ä–Ω–æ 1500 —Ç–æ–∫–µ–Ω–æ–≤ = 6000 —Å–∏–º–≤–æ–ª–æ–≤)
        let maxChunkSize = 6000

        // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –æ–¥–∏–Ω —á–∞–Ω–∫, —Å—É–º–º–∞—Ä–∏–∑–∏—Ä—É–µ–º –Ω–∞–ø—Ä—è–º—É—é
        if text.count <= maxChunkSize {
            summarizeChunk(
                chunk: text,
                apiKey: apiKey,
                isFirstChunk: true,
                isLastChunk: true,
                isFinalSummary: false,
                completion: completion
            )
            return
        }

        // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞–Ω–∫–∏
        let chunks = splitIntoChunks(text, maxChunkSize: maxChunkSize)
        print("üì¶ –¢–µ–∫—Å—Ç —Ä–∞–∑–±–∏—Ç –Ω–∞ \(chunks.count) —á–∞–Ω–∫–æ–≤ –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏")
        progressCallback?("–†–∞–∑–±–∏—Ç–æ –Ω–∞ \(chunks.count) —á–∞–Ω–∫–æ–≤")

        // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —á–∞–Ω–∫–æ–≤
        summarizeChunksSequentially(chunks: chunks, apiKey: apiKey, progressCallback: progressCallback, completion: completion)
    }

    // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —á–∞–Ω–∫–æ–≤
    private func summarizeChunksSequentially(
        chunks: [String],
        apiKey: String,
        progressCallback: ((String) -> Void)?,
        completion: @escaping (Result<String, Error>) -> Void
    ) {
        var summarizedChunks: [String] = []
        var currentIndex = 0

        func summarizeNextChunk() {
            guard currentIndex < chunks.count else {
                // –í—Å–µ —á–∞–Ω–∫–∏ —Å—É–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω—ã, –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                let combinedSummary = summarizedChunks.joined(separator: " ")

                // –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Å–µ –µ—â–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –¥–µ–ª–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é
                if combinedSummary.count > 6000 {
                    print("üìù –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
                    progressCallback?("–§–∏–Ω–∞–ª—å–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è")
                    summarizeChunk(
                        chunk: combinedSummary,
                        apiKey: apiKey,
                        isFirstChunk: true,
                        isLastChunk: true,
                        isFinalSummary: true,
                        completion: completion
                    )
                } else {
                    completion(.success(combinedSummary))
                }
                return
            }

            let chunk = chunks[currentIndex]
            let isFirstChunk = (currentIndex == 0)
            let isLastChunk = (currentIndex == chunks.count - 1)

            print("üìÑ –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —á–∞–Ω–∫–∞ \(currentIndex + 1)/\(chunks.count)")
            progressCallback?("–ß–∞–Ω–∫ \(currentIndex + 1)/\(chunks.count)")

            summarizeChunk(
                chunk: chunk,
                apiKey: apiKey,
                isFirstChunk: isFirstChunk,
                isLastChunk: isLastChunk,
                isFinalSummary: false
            ) { result in
                switch result {
                case .success(let summary):
                    summarizedChunks.append(summary)
                    currentIndex += 1
                    summarizeNextChunk()
                case .failure(let error):
                    completion(.failure(error))
                }
            }
        }

        summarizeNextChunk()
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ —á–∞–Ω–∫–∞ —Ç–µ–∫—Å—Ç–∞
    private func summarizeChunk(
        chunk: String,
        apiKey: String,
        isFirstChunk: Bool,
        isLastChunk: Bool,
        isFinalSummary: Bool,
        completion: @escaping (Result<String, Error>) -> Void
    ) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–µ–≥–∫—É—é –º–æ–¥–µ–ª—å –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
        let summarizationModel = "katanemo/Arch-Router-1.5B"

        guard let url = URL(string: "https://router.huggingface.co/v1/chat/completions") else {
            completion(.failure(NSError(domain: "HuggingFaceService", code: -1, userInfo: [NSLocalizedDescriptionKey: "–ù–µ–≤–µ—Ä–Ω—ã–π URL"])))
            return
        }

        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.setValue("Bearer \(apiKey)", forHTTPHeaderField: "Authorization")
        request.timeoutInterval = 30.0

        let summarizationPrompt: String
        if isFinalSummary {
            summarizationPrompt = """
            Create a final comprehensive summary by combining the following partial summaries.
            Keep all important information and write in the same language as the original text:

            \(chunk)
            """
        } else {
            summarizationPrompt = """
            Summarize the following text concisely, keeping the main points and key information.
            Keep it brief but informative. Write in the same language as the original text:

            \(chunk)
            """
        }

        let requestBody: [String: Any] = [
            "model": summarizationModel,
            "messages": [
                [
                    "role": "user",
                    "content": summarizationPrompt
                ]
            ],
            "temperature": 0.3,
            "max_tokens": 300
        ]

        do {
            request.httpBody = try JSONSerialization.data(withJSONObject: requestBody)
        } catch {
            completion(.failure(error))
            return
        }

        URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                completion(.failure(error))
                return
            }

            guard let data = data else {
                completion(.failure(NSError(domain: "HuggingFaceService", code: -2, userInfo: [NSLocalizedDescriptionKey: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"])))
                return
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP —Å—Ç–∞—Ç—É—Å
            if let httpResponse = response as? HTTPURLResponse {
                if httpResponse.statusCode >= 400 {
                    if let responseString = String(data: data, encoding: .utf8) {
                        completion(.failure(NSError(domain: "HuggingFaceService", code: httpResponse.statusCode, userInfo: [NSLocalizedDescriptionKey: "–û—à–∏–±–∫–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ (\(httpResponse.statusCode)): \(responseString)"])))
                    } else {
                        completion(.failure(NSError(domain: "HuggingFaceService", code: httpResponse.statusCode, userInfo: [NSLocalizedDescriptionKey: "–û—à–∏–±–∫–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: \(httpResponse.statusCode)"])))
                    }
                    return
                }
            }

            // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            do {
                let chatResponse = try JSONDecoder().decode(HuggingFaceChatResponse.self, from: data)

                if let firstChoice = chatResponse.choices.first {
                    let summarizedText = firstChoice.message.content.trimmingCharacters(in: .whitespacesAndNewlines)
                    completion(.success(summarizedText))
                    return
                }

                completion(.failure(NSError(domain: "HuggingFaceService", code: -5, userInfo: [NSLocalizedDescriptionKey: "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏"])))
            } catch {
                if let responseString = String(data: data, encoding: .utf8) {
                    completion(.failure(NSError(domain: "HuggingFaceService", code: -5, userInfo: [NSLocalizedDescriptionKey: "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: \(error.localizedDescription)\n–û—Ç–≤–µ—Ç: \(responseString)"])))
                } else {
                    completion(.failure(NSError(domain: "HuggingFaceService", code: -5, userInfo: [NSLocalizedDescriptionKey: "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: \(error.localizedDescription)"])))
                }
            }
        }.resume()
    }
}
