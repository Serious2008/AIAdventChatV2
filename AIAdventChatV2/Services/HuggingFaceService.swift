//
//  HuggingFaceService.swift
//  AIAdventChatV2
//
//  Created by Claude on 01.10.2025.
//

import Foundation

// Response format for new chat completions API
struct HuggingFaceChatResponse: Codable {
    let choices: [Choice]
    let usage: Usage?

    struct Choice: Codable {
        let message: Message

        struct Message: Codable {
            let content: String
        }
    }

    struct Usage: Codable {
        let prompt_tokens: Int?
        let completion_tokens: Int?
        let total_tokens: Int?
    }
}

struct ModelMetrics {
    let responseTime: TimeInterval
    let inputTokens: Int?
    let outputTokens: Int?
    let totalCost: Double?
    let modelName: String
}

class HuggingFaceService {

    // –ú–æ–¥–µ–ª–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π Inference Providers API
    static let availableModels = [
        // –ú–∞–ª–µ–Ω—å–∫–∏–µ –º–æ–¥–µ–ª–∏
        "katanemo/Arch-Router-1.5B",
        "microsoft/phi-2",

        // –°—Ä–µ–¥–Ω–∏–µ –º–æ–¥–µ–ª–∏
        "meta-llama/Llama-3.1-8B-Instruct",
        "mistralai/Mistral-7B-Instruct-v0.3",

        // –ë–æ–ª—å—à–∏–µ –º–æ–¥–µ–ª–∏
        "deepseek-ai/DeepSeek-V3-0324",
        "Qwen/Qwen2.5-72B-Instruct"
    ]

    func sendRequest(
        model: String,
        message: String,
        apiKey: String,
        temperature: Double,
        completion: @escaping (Result<(String, ModelMetrics), Error>) -> Void
    ) {
        let startTime = Date()

        guard let url = URL(string: "https://router.huggingface.co/v1/chat/completions") else {
            completion(.failure(NSError(domain: "HuggingFaceService", code: -1, userInfo: [NSLocalizedDescriptionKey: "–ù–µ–≤–µ—Ä–Ω—ã–π URL"])))
            return
        }

        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.setValue("Bearer \(apiKey)", forHTTPHeaderField: "Authorization")
        request.timeoutInterval = 60.0

        // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ - chat completions (–∫–∞–∫ OpenAI)
        let requestBody: [String: Any] = [
            "model": model,
            "messages": [
                [
                    "role": "user",
                    "content": message
                ]
            ],
            "temperature": min(temperature, 1.0),
            "max_tokens": 500
        ]

        do {
            request.httpBody = try JSONSerialization.data(withJSONObject: requestBody)
        } catch {
            completion(.failure(error))
            return
        }

        URLSession.shared.dataTask(with: request) { data, response, error in
            let responseTime = Date().timeIntervalSince(startTime)

            if let error = error {
                completion(.failure(error))
                return
            }

            guard let data = data else {
                completion(.failure(NSError(domain: "HuggingFaceService", code: -2, userInfo: [NSLocalizedDescriptionKey: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"])))
                return
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP —Å—Ç–∞—Ç—É—Å
            if let httpResponse = response as? HTTPURLResponse {
                print("üìä HuggingFace HTTP Status: \(httpResponse.statusCode)")
                print("üìä Request URL: \(httpResponse.url?.absoluteString ?? "unknown")")
                if let responseString = String(data: data, encoding: .utf8) {
                    print("üìä Response Body: \(responseString)")
                }

                if httpResponse.statusCode == 503 {
                    completion(.failure(NSError(domain: "HuggingFaceService", code: -6, userInfo: [NSLocalizedDescriptionKey: "–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥."])))
                    return
                }

                if httpResponse.statusCode == 404 {
                    completion(.failure(NSError(domain: "HuggingFaceService", code: -7, userInfo: [NSLocalizedDescriptionKey: "–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ Inference API."])))
                    return
                }

                if httpResponse.statusCode == 403 {
                    completion(.failure(NSError(domain: "HuggingFaceService", code: -8, userInfo: [NSLocalizedDescriptionKey: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –∏–ª–∏ –º–æ–¥–µ–ª—å —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Å—Ç—É–ø–∞."])))
                    return
                }

                if httpResponse.statusCode >= 400 {
                    if let responseString = String(data: data, encoding: .utf8) {
                        completion(.failure(NSError(domain: "HuggingFaceService", code: httpResponse.statusCode, userInfo: [NSLocalizedDescriptionKey: "–û—à–∏–±–∫–∞ API (\(httpResponse.statusCode)): \(responseString)"])))
                    } else {
                        completion(.failure(NSError(domain: "HuggingFaceService", code: httpResponse.statusCode, userInfo: [NSLocalizedDescriptionKey: "–û—à–∏–±–∫–∞ API: \(httpResponse.statusCode)"])))
                    }
                    return
                }
            }

            // –ü–∞—Ä—Å–∏–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (chat completions)
            do {
                let chatResponse = try JSONDecoder().decode(HuggingFaceChatResponse.self, from: data)

                if let firstChoice = chatResponse.choices.first {
                    let text = firstChoice.message.content

                    let metrics = ModelMetrics(
                        responseTime: responseTime,
                        inputTokens: chatResponse.usage?.prompt_tokens ?? self.estimateTokens(message),
                        outputTokens: chatResponse.usage?.completion_tokens ?? self.estimateTokens(text),
                        totalCost: 0.0,
                        modelName: model
                    )
                    completion(.success((text, metrics)))
                    return
                }

                completion(.failure(NSError(domain: "HuggingFaceService", code: -5, userInfo: [NSLocalizedDescriptionKey: "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏"])))
            } catch {
                // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É
                if let responseString = String(data: data, encoding: .utf8) {
                    completion(.failure(NSError(domain: "HuggingFaceService", code: -5, userInfo: [NSLocalizedDescriptionKey: "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: \(error.localizedDescription)\n–û—Ç–≤–µ—Ç: \(responseString)"])))
                } else {
                    completion(.failure(NSError(domain: "HuggingFaceService", code: -5, userInfo: [NSLocalizedDescriptionKey: "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç: \(error.localizedDescription)"])))
                }
            }
        }.resume()
    }

    // –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ (–ø—Ä–∏–º–µ—Ä–Ω–æ 4 —Å–∏–º–≤–æ–ª–∞ = 1 —Ç–æ–∫–µ–Ω)
    private func estimateTokens(_ text: String) -> Int {
        return text.count / 4
    }
}
