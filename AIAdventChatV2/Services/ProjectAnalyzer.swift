//
//  ProjectAnalyzer.swift
//  AIAdventChatV2
//
//  Created by Claude Code on 20.10.2025.
//

import Foundation

/// –°–µ—Ä–≤–∏—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
class ProjectAnalyzer {

    /// –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞–Ω–∞–ª–∏–∑
    enum AnalysisType {
        case structure      // –¢–æ–ª—å–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
        case bugs          // –¢–æ–ª—å–∫–æ –±–∞–≥–∏ –∏ –ø—Ä–æ–±–ª–µ–º—ã
        case full          // –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    }

    /// –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞
    struct AnalysisResult {
        let structure: String
        let problems: String
        let statistics: String
        let fileContents: [String: String]
    }

    /// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–µ–∫—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    static func analyzeProject() -> AnalysisResult {
        let projectPath = findProjectPath()

        // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
        let structure = buildProjectStructure(at: projectPath)

        // –ò—â–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        let problems = findPotentialProblems(at: projectPath)

        // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        let statistics = collectStatistics(at: projectPath)

        // –ß–∏—Ç–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã
        let fileContents = readKeyFiles(at: projectPath)

        return AnalysisResult(
            structure: structure,
            problems: problems,
            statistics: statistics,
            fileContents: fileContents
        )
    }

    /// –ù–∞—Ö–æ–¥–∏—Ç –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
    private static func findProjectPath() -> String {
        // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É
        let bundlePath = Bundle.main.bundlePath
        print("üìÇ Bundle path: \(bundlePath)")

        // –ü—Ä–æ–µ–∫—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –æ—Ç .app
        let projectPath = (bundlePath as NSString)
            .deletingLastPathComponent
            .replacingOccurrences(of: "/build/Debug", with: "")
            .replacingOccurrences(of: "/DerivedData", with: "")

        // –ï—Å–ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –∏—â–µ–º –∏—Å—Ö–æ–¥–Ω–∏–∫–∏
        let sourcePath = "\(projectPath)/AIAdventChatV2"
        print("üìÅ –ü—Ä–æ–≤–µ—Ä—è—é –ø—É—Ç—å: \(sourcePath)")

        if FileManager.default.fileExists(atPath: sourcePath) {
            print("‚úÖ –ü—É—Ç—å –Ω–∞–π–¥–µ–Ω: \(sourcePath)")
            return sourcePath
        }

        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å
        let altPath = "/Users/sergeymarkov/Documents/PetProject/AIAdventChatV2/AIAdventChatV2"
        print("üìÅ –ü—Ä–æ–≤–µ—Ä—è—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å: \(altPath)")

        if FileManager.default.fileExists(atPath: altPath) {
            print("‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å –Ω–∞–π–¥–µ–Ω: \(altPath)")
            return altPath
        }

        print("‚ö†Ô∏è –ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é: \(sourcePath)")
        return sourcePath
    }

    /// –°—Ç—Ä–æ–∏—Ç –¥–µ—Ä–µ–≤–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
    private static func buildProjectStructure(at path: String) -> String {
        print("üîç –°–∫–∞–Ω–∏—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –ø—É—Ç–∏: \(path)")
        var result = "# üìÅ –°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê\n\n"

        let fileManager = FileManager.default

        // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ñ–∞–π–ª–æ–≤
        var models: [String] = []
        var views: [String] = []
        var viewModels: [String] = []
        var services: [String] = []
        var other: [String] = []

        // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –≤—Å–µ .swift —Ñ–∞–π–ª—ã
        if let enumerator = fileManager.enumerator(atPath: path) {
            for case let file as String in enumerator {
                if file.hasSuffix(".swift") {
                    // –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º
                    if file.contains("Models/") {
                        models.append(file)
                    } else if file.contains("Views/") {
                        views.append(file)
                    } else if file.contains("ViewModels/") {
                        viewModels.append(file)
                    } else if file.contains("Services/") {
                        services.append(file)
                    } else {
                        other.append(file)
                    }
                }
            }
        }

        print("üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: Models=\(models.count), Views=\(views.count), ViewModels=\(viewModels.count), Services=\(services.count), Other=\(other.count)")

        result += "## Models (\(models.count) —Ñ–∞–π–ª–æ–≤)\n"
        models.sorted().forEach { result += "- \($0)\n" }

        result += "\n## Views (\(views.count) —Ñ–∞–π–ª–æ–≤)\n"
        views.sorted().forEach { result += "- \($0)\n" }

        result += "\n## ViewModels (\(viewModels.count) —Ñ–∞–π–ª–æ–≤)\n"
        viewModels.sorted().forEach { result += "- \($0)\n" }

        result += "\n## Services (\(services.count) —Ñ–∞–π–ª–æ–≤)\n"
        services.sorted().forEach { result += "- \($0)\n" }

        result += "\n## –î—Ä—É–≥–∏–µ (\(other.count) —Ñ–∞–π–ª–æ–≤)\n"
        other.sorted().forEach { result += "- \($0)\n" }

        return result
    }

    /// –ò—â–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–¥–µ
    private static func findPotentialProblems(at path: String) -> String {
        var result = "# ‚ö†Ô∏è –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ï –ü–†–û–ë–õ–ï–ú–´\n\n"

        var forceUnwraps: [(file: String, count: Int)] = []
        var forceCasts: [(file: String, count: Int)] = []
        var forceTries: [(file: String, count: Int)] = []
        var todos: [(file: String, count: Int)] = []

        let fileManager = FileManager.default

        if let enumerator = fileManager.enumerator(atPath: path) {
            for case let file as String in enumerator {
                if file.hasSuffix(".swift") {
                    let filePath = "\(path)/\(file)"

                    if let content = try? String(contentsOfFile: filePath, encoding: .utf8) {
                        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã
                        let unwrapCount = content.components(separatedBy: "!").count - 1
                        let castCount = content.components(separatedBy: "as!").count - 1
                        let tryCount = content.components(separatedBy: "try!").count - 1
                        let todoCount = content.components(separatedBy: "TODO").count - 1 +
                                       content.components(separatedBy: "FIXME").count - 1

                        if unwrapCount > 0 {
                            forceUnwraps.append((file, unwrapCount))
                        }
                        if castCount > 0 {
                            forceCasts.append((file, castCount))
                        }
                        if tryCount > 0 {
                            forceTries.append((file, tryCount))
                        }
                        if todoCount > 0 {
                            todos.append((file, todoCount))
                        }
                    }
                }
            }
        }

        // Force Unwrapping
        result += "## 1. Force Unwrapping (!)\n"
        if !forceUnwraps.isEmpty {
            result += "–ù–∞–π–¥–µ–Ω–æ \(forceUnwraps.reduce(0) { $0 + $1.count }) –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –≤ \(forceUnwraps.count) —Ñ–∞–π–ª–∞—Ö:\n\n"
            forceUnwraps.sorted { $0.count > $1.count }.prefix(10).forEach {
                result += "- **\($0.file)**: \($0.count) —Ä–∞–∑(–∞)\n"
            }
        } else {
            result += "‚úÖ –ù–µ –Ω–∞–π–¥–µ–Ω–æ\n"
        }

        // Force Casting
        result += "\n## 2. Force Casting (as!)\n"
        if !forceCasts.isEmpty {
            result += "–ù–∞–π–¥–µ–Ω–æ \(forceCasts.reduce(0) { $0 + $1.count }) –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –≤ \(forceCasts.count) —Ñ–∞–π–ª–∞—Ö:\n\n"
            forceCasts.sorted { $0.count > $1.count }.forEach {
                result += "- **\($0.file)**: \($0.count) —Ä–∞–∑(–∞)\n"
            }
        } else {
            result += "‚úÖ –ù–µ –Ω–∞–π–¥–µ–Ω–æ\n"
        }

        // Force Try
        result += "\n## 3. Force Try (try!)\n"
        if !forceTries.isEmpty {
            result += "–ù–∞–π–¥–µ–Ω–æ \(forceTries.reduce(0) { $0 + $1.count }) –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –≤ \(forceTries.count) —Ñ–∞–π–ª–∞—Ö:\n\n"
            forceTries.sorted { $0.count > $1.count }.forEach {
                result += "- **\($0.file)**: \($0.count) —Ä–∞–∑(–∞)\n"
            }
        } else {
            result += "‚úÖ –ù–µ –Ω–∞–π–¥–µ–Ω–æ\n"
        }

        // TODO/FIXME
        result += "\n## 4. TODO/FIXME –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏\n"
        if !todos.isEmpty {
            result += "–ù–∞–π–¥–µ–Ω–æ \(todos.reduce(0) { $0 + $1.count }) –∑–∞–¥–∞—á –≤ \(todos.count) —Ñ–∞–π–ª–∞—Ö:\n\n"
            todos.sorted { $0.count > $1.count }.forEach {
                result += "- **\($0.file)**: \($0.count) –∑–∞–¥–∞—á(–∏)\n"
            }
        } else {
            result += "‚úÖ –ù–µ –Ω–∞–π–¥–µ–Ω–æ\n"
        }

        return result
    }

    /// –°–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–µ–∫—Ç–∞
    private static func collectStatistics(at path: String) -> String {
        var result = "# üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n\n"

        var totalFiles = 0
        var totalLines = 0
        var largestFiles: [(file: String, lines: Int)] = []

        let fileManager = FileManager.default

        if let enumerator = fileManager.enumerator(atPath: path) {
            for case let file as String in enumerator {
                if file.hasSuffix(".swift") {
                    totalFiles += 1
                    let filePath = "\(path)/\(file)"

                    if let content = try? String(contentsOfFile: filePath, encoding: .utf8) {
                        let lines = content.components(separatedBy: .newlines).count
                        totalLines += lines
                        largestFiles.append((file, lines))
                    }
                }
            }
        }

        result += "- **–í—Å–µ–≥–æ .swift —Ñ–∞–π–ª–æ–≤**: \(totalFiles)\n"
        result += "- **–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞**: \(totalLines)\n"
        result += "- **–°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞**: \(totalFiles > 0 ? totalLines / totalFiles : 0) —Å—Ç—Ä–æ–∫\n"

        result += "\n## –°–∞–º—ã–µ –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã:\n"
        largestFiles.sorted { $0.lines > $1.lines }.prefix(5).forEach {
            result += "- **\($0.file)**: \($0.lines) —Å—Ç—Ä–æ–∫\n"
        }

        return result
    }

    /// –ß–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
    private static func readKeyFiles(at path: String) -> [String: String] {
        var contents: [String: String] = [:]

        let keyFiles = [
            "ViewModels/ChatViewModel.swift",
            "Services/ClaudeService.swift",
            "Models/Settings.swift",
            "AIAdventChatV2App.swift"
        ]

        for file in keyFiles {
            let filePath = "\(path)/\(file)"
            if let content = try? String(contentsOfFile: filePath, encoding: .utf8) {
                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–æ 500 —Å—Ç—Ä–æ–∫
                let lines = content.components(separatedBy: .newlines).prefix(500).joined(separator: "\n")
                contents[file] = lines
            }
        }

        return contents
    }

    /// –§–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ Claude –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
    static func generateReport(type: AnalysisType = .full) -> String {
        let result = analyzeProject()

        switch type {
        case .structure:
            return generateStructureReport(result: result)
        case .bugs:
            return generateBugsReport(result: result)
        case .full:
            return generateFullReport(result: result)
        }
    }

    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á—ë—Ç —Ç–æ–ª—å–∫–æ –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ø—Ä–æ–µ–∫—Ç–∞
    private static func generateStructureReport(result: AnalysisResult) -> String {
        var report = """
        –≠–¢–û –°–¢–†–£–ö–¢–£–†–ê –†–ï–ê–õ–¨–ù–û–ì–û –ü–†–û–ï–ö–¢–ê AIAdventChatV2.

        ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

        """

        report += result.statistics
        report += "\n\n"
        report += result.structure

        report += """

        ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

        # üéØ –¢–í–û–Ø –ó–ê–î–ê–ß–ê

        –í—ã—à–µ - –†–ï–ê–õ–¨–ù–ê–Ø —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ AIAdventChatV2 (macOS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ Swift/SwiftUI).

        –û–ø–∏—à–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –¢–û–õ–¨–ö–û —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö:

        1. **–û–±—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞**: –°–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –∏ –∫–∞–∫–æ–≥–æ —Ç–∏–ø–∞
        2. **–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω**: MVVM –∏–ª–∏ –¥—Ä—É–≥–æ–π (–ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –ø–∞–ø–∫–∞–º)
        3. **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã**: –ö–∞–∫–∏–µ –º–æ–¥—É–ª–∏ –≤–∏–¥–Ω—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º —Ñ–∞–π–ª–æ–≤
        4. **–†–∞–∑–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞**: –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

        ‚ö†Ô∏è –í–ê–ñ–ù–û:
        - –£–ø–æ–º–∏–Ω–∞–π –¢–û–õ–¨–ö–û —Ñ–∞–π–ª—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ
        - –ù–ï –ø—Ä–∏–¥—É–º—ã–≤–∞–π –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        - –ò—Å–ø–æ–ª—å–∑—É–π –†–ï–ê–õ–¨–ù–´–ï —Ü–∏—Ñ—Ä—ã –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

        –ù–∞—á–Ω–∏ —Å–æ —Å–ª–æ–≤: "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ AIAdventChatV2..."
        """

        return report
    }

    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á—ë—Ç —Ç–æ–ª—å–∫–æ –æ –±–∞–≥–∞—Ö –∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö
    private static func generateBugsReport(result: AnalysisResult) -> String {
        var report = """
        –ù–ê–ô–î–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ –í –†–ï–ê–õ–¨–ù–û–ú –ü–†–û–ï–ö–¢–ï AIAdventChatV2.

        ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

        """

        report += result.problems

        report += """

        ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

        # üéØ –¢–í–û–Ø –ó–ê–î–ê–ß–ê

        –í—ã—à–µ - –†–ï–ê–õ–¨–ù–´–ï –ø—Ä–æ–±–ª–µ–º—ã –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤ –ø—Ä–æ–µ–∫—Ç–µ AIAdventChatV2.

        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¢–û–õ–¨–ö–û —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö:

        1. **–ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å**: –û—Ü–µ–Ω–∏ —Å–µ—Ä—å—ë–∑–Ω–æ—Å—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
        2. **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã**: –ß—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
        3. **–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏**: –ö–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å (—Å –ø—Ä–∏–º–µ—Ä–∞–º–∏)

        ‚ö†Ô∏è –í–ê–ñ–ù–û:
        - –£–ø–æ–º–∏–Ω–∞–π –¢–û–õ–¨–ö–û —Ñ–∞–π–ª—ã –∏ –ø—Ä–æ–±–ª–µ–º—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ
        - –ò—Å–ø–æ–ª—å–∑—É–π –†–ï–ê–õ–¨–ù–´–ï —Ü–∏—Ñ—Ä—ã
        - –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ

        –ù–∞—á–Ω–∏ —Å–æ —Å–ª–æ–≤: "–ù–∞ –æ—Å–Ω–æ–≤–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã..."
        """

        return report
    }

    /// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç
    private static func generateFullReport(result: AnalysisResult) -> String {
        var report = """
        –≠–¢–û –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –û –ü–†–û–ï–ö–¢–ï AIAdventChatV2. –ù–ï –ø—Ä–∏–¥—É–º—ã–≤–∞–π –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç!

        –ò–°–ü–û–õ–¨–ó–£–ô –¢–û–õ–¨–ö–û –≠–¢–£ –ò–ù–§–û–†–ú–ê–¶–ò–Æ –ù–ò–ñ–ï. –í—Å–µ —Ñ–∞–π–ª—ã –∏ —Ü–∏—Ñ—Ä—ã - –†–ï–ê–õ–¨–ù–´–ï.

        ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

        """

        report += result.statistics
        report += "\n\n"
        report += result.structure
        report += "\n\n"
        report += result.problems

        report += """

        ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

        # üéØ –¢–í–û–Ø –ó–ê–î–ê–ß–ê

        –ü—Ä–æ–µ–∫—Ç AIAdventChatV2 - —ç—Ç–æ –†–ï–ê–õ–¨–ù–´–ô macOS Swift/SwiftUI –ø—Ä–æ–µ–∫—Ç.
        –í—ã—à–µ –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.

        –ù–∞ –æ—Å–Ω–æ–≤–µ –¢–û–õ–¨–ö–û —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö:

        1. **–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞**: –û–ø–∏—à–∏ –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É (Models, Views, ViewModels, Services)
        2. **–ü—Ä–æ–±–ª–µ–º—ã**: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ö–û–ù–ö–†–ï–¢–ù–´–ï –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã (force unwrapping –∏ —Ç.–¥.)
        3. **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏**: –î–∞–π —Å–æ–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –†–ï–ê–õ–¨–ù–û–ô —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

        ‚ö†Ô∏è –í–ê–ñ–ù–û:
        - –ù–ï –ø—Ä–∏–¥—É–º—ã–≤–∞–π —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –≤—ã—à–µ
        - –ù–ï –ø—Ä–∏–¥—É–º—ã–≤–∞–π –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
        - –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —Ç–µ —Ü–∏—Ñ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∫–∞–∑–∞–Ω—ã –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
        - –£–ø–æ–º–∏–Ω–∞–π –¢–û–õ–¨–ö–û —Ç–µ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ

        –ù–∞—á–Ω–∏ –∞–Ω–∞–ª–∏–∑ —Å–æ —Å–ª–æ–≤: "–ù–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ AIAdventChatV2..."
        """

        return report
    }
}
