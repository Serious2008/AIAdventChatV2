import Foundation
import MCP

#if canImport(System)
import System
#else
@preconcurrency import SystemPackage
#endif

/// –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Model Context Protocol
class MCPService: ObservableObject {
    @Published var isConnected = false
    @Published var availableTools: [MCPTool] = []
    @Published var errorMessage: String?

    private var client: Client?
    private var transport: StdioTransport?
    private var serverProcess: Process?

    /// –°–æ–∑–¥–∞–Ω–∏–µ MCP –∫–ª–∏–µ–Ω—Ç–∞
    func initializeClient() {
        client = Client(name: "AIAdventChat", version: "2.0.0")
        print("MCP Client initialized: AIAdventChat v2.0.0")
    }

    /// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MCP —Å–µ—Ä–≤–µ—Ä—É —á–µ—Ä–µ–∑ stdio
    /// - Parameter serverCommand: –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ["npx", "-y", "@modelcontextprotocol/server-memory"])
    func connect(serverCommand: [String]) async throws {
        guard let client = client else {
            throw MCPError.clientNotInitialized
        }

        guard !serverCommand.isEmpty else {
            throw MCPError.invalidServerCommand
        }

        print("üì• Received serverCommand: \(serverCommand)")
        print("   Count: \(serverCommand.count)")
        for (i, arg) in serverCommand.enumerated() {
            print("   [\(i)]: '\(arg)'")
        }

        do {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º SIGPIPE —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫—Ä–µ—à–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø–∞–π–ø–∞–º–∏
            signal(SIGPIPE, SIG_IGN)

            // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –∫–æ–º–∞–Ω–¥–µ
            let commandName = serverCommand[0]
            let commandArgs = Array(serverCommand.dropFirst())

            print("üîç Command name: '\(commandName)'")
            print("üîç Command args: \(commandArgs)")

            let executablePath: String
            if let fullPath = findExecutable(commandName) {
                executablePath = fullPath
                print("‚úÖ Resolved '\(commandName)' to: \(fullPath)")
            } else {
                executablePath = commandName
                print("‚ö†Ô∏è  Warning: Could not resolve '\(commandName)', using as-is")
            }

            // –ó–∞–ø—É—Å–∫–∞–µ–º MCP —Å–µ—Ä–≤–µ—Ä –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
            let process = Process()
            process.executableURL = URL(fileURLWithPath: executablePath)
            process.arguments = commandArgs

            print("üöÄ Executing: \(executablePath)")
            print("   Arguments: \(commandArgs)")
            print("   Full command: \(executablePath) \(commandArgs.joined(separator: " "))")

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º PATH
            var environment = ProcessInfo.processInfo.environment

            // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è Node.js –≤ PATH
            let additionalPaths = [
                "\(NSHomeDirectory())/.nvm/versions/node/v22.18.0/bin",
                "\(NSHomeDirectory())/.nvm/current/bin",
                "\(NSHomeDirectory())/.npm-global/bin",
                "\(NSHomeDirectory())/.volta/bin",
                "/usr/local/bin",
                "/usr/bin",
                "/bin",
                "/opt/homebrew/bin",
                "/opt/homebrew/opt/node/bin",
            ].joined(separator: ":")

            let existingPath = environment["PATH"] ?? ""
            environment["PATH"] = "\(additionalPaths):\(existingPath)"
            process.environment = environment

            print("Process PATH: \(environment["PATH"] ?? "none")")

            // –°–æ–∑–¥–∞–µ–º –ø–∞–π–ø—ã –¥–ª—è stdin/stdout
            let stdinPipe = Pipe()
            let stdoutPipe = Pipe()
            let stderrPipe = Pipe()

            process.standardInput = stdinPipe
            process.standardOutput = stdoutPipe
            process.standardError = stderrPipe

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ stderr –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            stderrPipe.fileHandleForReading.readabilityHandler = { handle in
                let data = handle.availableData
                if !data.isEmpty, let output = String(data: data, encoding: .utf8) {
                    print("MCP Server stderr: \(output)")
                }
            }

            print("Starting MCP server process: \(serverCommand.joined(separator: " "))")
            try process.run()

            // –î–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
            try await Task.sleep(for: .seconds(1))

            serverProcess = process

            // –°–æ–∑–¥–∞–µ–º stdio transport —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞–º–∏
            // –î–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Å–µ—Ä–≤–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ–º stdin —Å–µ—Ä–≤–µ—Ä–∞ (write end of stdin pipe)
            // –î–ª—è —á—Ç–µ–Ω–∏—è –∏–∑ —Å–µ—Ä–≤–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º stdout —Å–µ—Ä–≤–µ—Ä–∞ (read end of stdout pipe)
            let inputFD = FileDescriptor(rawValue: stdoutPipe.fileHandleForReading.fileDescriptor)
            let outputFD = FileDescriptor(rawValue: stdinPipe.fileHandleForWriting.fileDescriptor)

            transport = StdioTransport(input: inputFD, output: outputFD)

            guard let transport = transport else {
                throw MCPError.transportCreationFailed
            }

            // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
            print("Connecting to MCP server...")
            _ = try await client.connect(transport: transport)

            await MainActor.run {
                self.isConnected = true
                self.errorMessage = nil
            }

            print("Successfully connected to MCP server")

            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            try await fetchAvailableTools()

        } catch {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
            serverProcess?.terminate()
            serverProcess = nil

            await MainActor.run {
                self.isConnected = false
                self.errorMessage = "Connection failed: \(error.localizedDescription)"
            }
            print("Failed to connect: \(error)")
            throw error
        }
    }

    /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –æ—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞
    func fetchAvailableTools() async throws {
        guard let client = client, isConnected else {
            throw MCPError.notConnected
        }

        do {
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            let (tools, _) = try await client.listTools()

            await MainActor.run {
                self.availableTools = tools.map { tool in
                    MCPTool(
                        name: tool.name,
                        description: tool.description,
                        inputSchema: tool.inputSchema
                    )
                }
                print("Received \(tools.count) tools from MCP server:")
                for tool in tools {
                    print("- \(tool.name): \(tool.description ?? "No description")")
                }
            }

        } catch {
            await MainActor.run {
                self.errorMessage = "Failed to fetch tools: \(error.localizedDescription)"
            }
            print("Failed to fetch tools: \(error)")
            throw error
        }
    }

    /// –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞
    func disconnect() async {
        guard isConnected else {
            return
        }

        // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        if let client = client {
            await client.disconnect()
        }

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–µ—Ä–≤–µ—Ä–∞
        if let process = serverProcess {
            process.terminate()
            // –î–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—É –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            try? await Task.sleep(for: .milliseconds(100))
        }
        serverProcess = nil
        transport = nil

        await MainActor.run {
            self.isConnected = false
            self.availableTools = []
        }
        print("Disconnected from MCP server")
    }

    /// –í—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    /// - Parameters:
    ///   - toolName: –ò–º—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    ///   - arguments: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (—Å–ª–æ–≤–∞—Ä—å Value —Ç–∏–ø–æ–≤ –∏–∑ MCP)
    /// - Returns: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    func callTool(name toolName: String, arguments: [String: Value]?) async throws -> MCPToolResult {
        guard let client = client, isConnected else {
            throw MCPError.notConnected
        }

        print("Calling tool '\(toolName)' with arguments: \(arguments?.description ?? "{}")")
        let (content, isError) = try await client.callTool(name: toolName, arguments: arguments)
        print("Tool '\(toolName)' returned \(content.count) content items")

        return MCPToolResult(content: content, isError: isError ?? false)
    }
}

// MARK: - Error Types

enum MCPError: LocalizedError {
    case clientNotInitialized
    case transportCreationFailed
    case notConnected
    case invalidServerCommand

    var errorDescription: String? {
        switch self {
        case .clientNotInitialized:
            return "MCP client is not initialized. Call initializeClient() first."
        case .transportCreationFailed:
            return "Failed to create transport for MCP connection."
        case .notConnected:
            return "Not connected to MCP server. Call connect() first."
        case .invalidServerCommand:
            return "Server command cannot be empty."
        }
    }
}

// MARK: - Tool Model

/// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
struct MCPTool: Identifiable {
    let id = UUID()
    let name: String
    let description: String?
    let inputSchema: Value?
}

// MARK: - Tool Result

/// –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
struct MCPToolResult {
    let content: [MCP.Tool.Content]
    let isError: Bool
}

// MARK: - Helper Functions

/// –ù–∞—Ö–æ–¥–∏—Ç –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É
/// - Parameter command: –ò–º—è –∫–æ–º–∞–Ω–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "npx")
/// - Returns: –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ nil
private func findExecutable(_ command: String) -> String? {
    // –ï—Å–ª–∏ —É–∂–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å
    if command.hasPrefix("/") {
        return FileManager.default.fileExists(atPath: command) ? command : nil
    }

    // –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞ (–≤–∞–∂–µ–Ω –ø–æ—Ä—è–¥–æ–∫ - —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –±–æ–ª–µ–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ)
    let searchPaths = [
        // –ü—É—Ç–∏ –æ—Ç nvm (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏)
        "\(NSHomeDirectory())/.nvm/versions/node/v22.18.0/bin",
        "\(NSHomeDirectory())/.nvm/current/bin",
        // Volta
        "\(NSHomeDirectory())/.volta/bin",
        // npm global
        "\(NSHomeDirectory())/.npm-global/bin",
        // Homebrew node (—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        "/opt/homebrew/opt/node/bin",
        "/opt/homebrew/bin",
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏ (–º–æ–≥—É—Ç –±—ã—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏)
        "/usr/local/bin",
        "/usr/bin",
        "/bin",
    ]

    // –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º PATH –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if let pathEnv = ProcessInfo.processInfo.environment["PATH"] {
        let pathComponents = pathEnv.split(separator: ":").map(String.init)
        for path in pathComponents {
            let fullPath = "\(path)/\(command)"
            if FileManager.default.isExecutableFile(atPath: fullPath) {
                return fullPath
            }
        }
    }

    // –ü–æ–∏—Å–∫ –≤ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—É—Ç—è—Ö
    for path in searchPaths {
        let fullPath = "\(path)/\(command)"
        if FileManager.default.isExecutableFile(atPath: fullPath) {
            return fullPath
        }
    }

    // –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ which
    let process = Process()
    process.executableURL = URL(fileURLWithPath: "/usr/bin/which")
    process.arguments = [command]

    let pipe = Pipe()
    process.standardOutput = pipe
    process.standardError = Pipe()

    do {
        try process.run()
        process.waitUntilExit()

        if process.terminationStatus == 0 {
            let data = pipe.fileHandleForReading.readDataToEndOfFile()
            if let path = String(data: data, encoding: .utf8)?.trimmingCharacters(in: .whitespacesAndNewlines),
               !path.isEmpty {
                return path
            }
        }
    } catch {
        print("Failed to run 'which': \(error)")
    }

    return nil
}
