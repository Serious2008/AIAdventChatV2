import Foundation
import MCP

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è iOS —Å–∏–º—É–ª—è—Ç–æ—Ä–æ–º
class SimulatorToolsProvider {
    /// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    static func getTools() -> [ClaudeTool] {
        return [
            getListSimulatorsTool(),
            getBootSimulatorTool(),
            getShutdownSimulatorTool(),
            getInstallAppTool(),
            getLaunchAppTool(),
            getTakeScreenshotTool(),
            getListAppsTool()
        ]
    }

    /// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä–æ–≤
    private static func getListSimulatorsTool() -> ClaudeTool {
        return ClaudeTool(
            name: "list_simulators",
            description: """
            –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö iOS —Å–∏–º—É–ª—è—Ç–æ—Ä–æ–≤ –Ω–∞ —ç—Ç–æ–º Mac.
            –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç:
            - "–ö–∞–∫–∏–µ —Å–∏–º—É–ª—è—Ç–æ—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã?"
            - "–ü–æ–∫–∞–∂–∏ —Å–ø–∏—Å–æ–∫ —Å–∏–º—É–ª—è—Ç–æ—Ä–æ–≤"
            - "–ö–∞–∫–∏–µ iPhone —Å–∏–º—É–ª—è—Ç–æ—Ä—ã —É –º–µ–Ω—è –µ—Å—Ç—å?"

            –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–º—è, —Å–æ—Å—Ç–æ—è–Ω–∏–µ (Booted/Shutdown), –≤–µ—Ä—Å–∏—é iOS –∏ UDID –∫–∞–∂–¥–æ–≥–æ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞.
            """,
            properties: [:],
            required: nil
        )
    }

    /// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞
    private static func getBootSimulatorTool() -> ClaudeTool {
        return ClaudeTool(
            name: "boot_simulator",
            description: """
            –ó–∞–ø—É—Å—Ç–∏—Ç—å iOS —Å–∏–º—É–ª—è—Ç–æ—Ä.
            –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç:
            - "–ó–∞–ø—É—Å—Ç–∏ iPhone 16 Pro —Å–∏–º—É–ª—è—Ç–æ—Ä"
            - "–û—Ç–∫—Ä–æ–π —Å–∏–º—É–ª—è—Ç–æ—Ä"
            - "–í–∫–ª—é—á–∏ iPhone —Å–∏–º—É–ª—è—Ç–æ—Ä"

            –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'iPhone 16 Pro') –∏–ª–∏ UDID.
            –°–∏–º—É–ª—è—Ç–æ—Ä –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤–∏–∑—É–∞–ª—å–Ω–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Simulator.
            """,
            properties: [
                "simulator": ClaudeTool.InputSchema.Property(
                    type: "string",
                    description: "–ò–º—è —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'iPhone 16 Pro') –∏–ª–∏ UDID"
                )
            ],
            required: ["simulator"]
        )
    }

    /// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞
    private static func getShutdownSimulatorTool() -> ClaudeTool {
        return ClaudeTool(
            name: "shutdown_simulator",
            description: """
            –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø—É—â–µ–Ω–Ω—ã–π iOS —Å–∏–º—É–ª—è—Ç–æ—Ä –∏ –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Simulator.app.
            –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç:
            - "–û—Å—Ç–∞–Ω–æ–≤–∏ —Å–∏–º—É–ª—è—Ç–æ—Ä"
            - "–í—ã–∫–ª—é—á–∏ iPhone —Å–∏–º—É–ª—è—Ç–æ—Ä"
            - "–ó–∞–∫—Ä–æ–π —Å–∏–º—É–ª—è—Ç–æ—Ä"

            –í–ê–ñ–ù–û: –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —Å–∏–º—É–ª—è—Ç–æ—Ä, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Simulator.app –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç–æ.
            """,
            properties: [
                "simulator": ClaudeTool.InputSchema.Property(
                    type: "string",
                    description: "–ò–º—è —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ –∏–ª–∏ UDID –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"
                )
            ],
            required: ["simulator"]
        )
    }

    /// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    private static func getInstallAppTool() -> ClaudeTool {
        return ClaudeTool(
            name: "install_app",
            description: """
            –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å .app —Ñ–∞–π–ª –Ω–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä.
            –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç:
            - "–£—Å—Ç–∞–Ω–æ–≤–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä"
            - "–ü–æ—Å—Ç–∞–≤—å .app –Ω–∞ iPhone —Å–∏–º—É–ª—è—Ç–æ—Ä"

            –í–ê–ñ–ù–û: –°–∏–º—É–ª—è—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω (–∏—Å–ø–æ–ª—å–∑—É–π boot_simulator —Å–Ω–∞—á–∞–ª–∞).
            –ü—É—Ç—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—ã–º –¥–æ .app bundle.
            """,
            properties: [
                "simulator": ClaudeTool.InputSchema.Property(
                    type: "string",
                    description: "–ò–º—è —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ –∏–ª–∏ UDID"
                ),
                "app_path": ClaudeTool.InputSchema.Property(
                    type: "string",
                    description: "–ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ .app bundle"
                )
            ],
            required: ["simulator", "app_path"]
        )
    }

    /// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    private static func getLaunchAppTool() -> ClaudeTool {
        return ClaudeTool(
            name: "launch_app",
            description: """
            –ó–∞–ø—É—Å—Ç–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä–µ.
            –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç:
            - "–ó–∞–ø—É—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä–µ"
            - "–û—Ç–∫—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"

            –í–ê–ñ–ù–û: –°–∏–º—É–ª—è—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.
            """,
            properties: [
                "simulator": ClaudeTool.InputSchema.Property(
                    type: "string",
                    description: "–ò–º—è —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ –∏–ª–∏ UDID"
                ),
                "bundle_id": ClaudeTool.InputSchema.Property(
                    type: "string",
                    description: "Bundle Identifier –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'com.example.MyApp')"
                )
            ],
            required: ["simulator", "bundle_id"]
        )
    }

    /// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    private static func getTakeScreenshotTool() -> ClaudeTool {
        return ClaudeTool(
            name: "take_screenshot",
            description: """
            –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —ç–∫—Ä–∞–Ω–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞.
            –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç:
            - "–°–¥–µ–ª–∞–π —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–∏–º—É–ª—è—Ç–æ—Ä–∞"
            - "–°–æ—Ö—Ä–∞–Ω–∏ —ç–∫—Ä–∞–Ω —Å–∏–º—É–ª—è—Ç–æ—Ä–∞"
            - "–ü–æ–∫–∞–∂–∏ —á—Ç–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞"

            –í–ê–ñ–ù–û: –°–∏–º—É–ª—è—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.
            –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –Ω–∞ Desktop.
            """,
            properties: [
                "simulator": ClaudeTool.InputSchema.Property(
                    type: "string",
                    description: "–ò–º—è —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ –∏–ª–∏ UDID"
                ),
                "output_path": ClaudeTool.InputSchema.Property(
                    type: "string",
                    description: "–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
                )
            ],
            required: ["simulator"]
        )
    }

    /// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
    private static func getListAppsTool() -> ClaudeTool {
        return ClaudeTool(
            name: "list_apps",
            description: """
            –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä–µ.
            –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç:
            - "–ö–∞–∫–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä–µ?"
            - "–ü–æ–∫–∞–∂–∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"
            - "–ß—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä–µ?"
            """,
            properties: [
                "simulator": ClaudeTool.InputSchema.Property(
                    type: "string",
                    description: "–ò–º—è —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ –∏–ª–∏ UDID"
                )
            ],
            required: ["simulator"]
        )
    }

    /// –í—ã–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
    static func executeTool(
        name: String,
        input: [String: Any],
        simulatorService: SimulatorService,
        progressCallback: ((String) -> Void)? = nil
    ) async throws -> String {
        print("üîß SimulatorTools.executeTool –≤—ã–∑–≤–∞–Ω —Å name: '\(name)'")
        print("üìä –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: \(input)")

        progressCallback?("üì± iOS Simulator MCP Server –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É...")

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è MCP
        var arguments: [String: MCP.Value]
        switch name {
        case "list_simulators":
            arguments = [:]

        case "boot_simulator", "shutdown_simulator", "list_apps", "take_screenshot":
            guard let simulator = input["simulator"] as? String else {
                return "‚ùå –ü–∞—Ä–∞–º–µ—Ç—Ä 'simulator' –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"
            }
            arguments = ["simulator": .string(simulator)]
            if name == "take_screenshot", let outputPath = input["output_path"] as? String {
                arguments["output_path"] = .string(outputPath)
            }

        case "install_app":
            guard let simulator = input["simulator"] as? String,
                  let appPath = input["app_path"] as? String else {
                return "‚ùå –ü–∞—Ä–∞–º–µ—Ç—Ä—ã 'simulator' –∏ 'app_path' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"
            }
            arguments = [
                "simulator": .string(simulator),
                "app_path": .string(appPath)
            ]

        case "launch_app":
            guard let simulator = input["simulator"] as? String,
                  let bundleId = input["bundle_id"] as? String else {
                return "‚ùå –ü–∞—Ä–∞–º–µ—Ç—Ä—ã 'simulator' –∏ 'bundle_id' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"
            }
            arguments = [
                "simulator": .string(simulator),
                "bundle_id": .string(bundleId)
            ]

        default:
            return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: \(name)"
        }

        // –í—ã–∑—ã–≤–∞–µ–º MCP tool —á–µ—Ä–µ–∑ SimulatorService
        let result = try await simulatorService.callSimulatorTool(name: name, arguments: arguments)

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        let resultText = result.content.compactMap { item -> String? in
            if case .text(let text) = item {
                return text
            }
            return nil
        }.joined(separator: "\n")

        progressCallback?("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

        return resultText
    }
}
