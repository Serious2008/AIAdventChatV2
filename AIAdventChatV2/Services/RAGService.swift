//
//  RAGService.swift
//  AIAdventChatV2
//
//  Service for Retrieval-Augmented Generation
//

import Foundation

// MARK: - RAG Response Model

struct RAGResponse {
    let answer: String
    let usedChunks: [SearchResult]
    let question: String
    let processingTime: TimeInterval
}

// MARK: - RAG Service

class RAGService {

    enum RAGError: Error {
        case vectorSearchFailed
        case llmFailed(String)
        case noRelevantContext
    }

    private let vectorSearchService: VectorSearchService

    // MARK: - Init

    init(vectorSearchService: VectorSearchService) {
        self.vectorSearchService = vectorSearchService
    }

    // MARK: - Public Methods

    /// Answer question using RAG (Retrieval-Augmented Generation)
    func answerWithRAG(
        question: String,
        topK: Int = 5,
        minSimilarity: Double = 0.3
    ) async throws -> RAGResponse {
        let startTime = Date()

        // Step 1: Search for relevant chunks
        print("üîç RAG: Searching for relevant chunks...")
        let searchResults = try await vectorSearchService.search(query: question, topK: topK)

        // Filter by minimum similarity
        let relevantChunks = searchResults.filter { $0.similarity >= minSimilarity }

        guard !relevantChunks.isEmpty else {
            throw RAGError.noRelevantContext
        }

        print("üìö RAG: Found \(relevantChunks.count) relevant chunks")

        // Step 2: Build context from chunks
        let context = buildContext(from: relevantChunks)

        // Step 3: Build prompt with context
        let prompt = buildRAGPrompt(question: question, context: context)

        print("üí¨ RAG: Sending prompt to LLM...")

        // Step 4: Send to LLM
        let answer = try await sendToLLM(prompt: prompt)

        let processingTime = Date().timeIntervalSince(startTime)

        print("‚úÖ RAG: Complete in \(String(format: "%.2f", processingTime))s")

        return RAGResponse(
            answer: answer,
            usedChunks: relevantChunks,
            question: question,
            processingTime: processingTime
        )
    }

    /// Answer question without RAG (baseline)
    func answerWithoutRAG(question: String) async throws -> String {
        print("üí¨ No RAG: Sending question directly to LLM...")
        return try await sendToLLM(prompt: question)
    }

    // MARK: - Private Methods

    private func buildContext(from chunks: [SearchResult]) -> String {
        var context = ""

        for (index, result) in chunks.enumerated() {
            let cleanedContent = result.chunk.content
                .components(separatedBy: .whitespacesAndNewlines)
                .filter { !$0.isEmpty }
                .joined(separator: " ")

            context += """

            [–ò—Å—Ç–æ—á–Ω–∏–∫ \(index + 1): \(result.chunk.fileName) - –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: \(String(format: "%.1f%%", result.similarity * 100))]
            \(cleanedContent)

            ---

            """
        }

        return context
    }

    private func buildRAGPrompt(question: String, context: String) -> String {
        return """
        –¢—ã - AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –ø–æ–Ω—è—Ç—å –∏—Ö –∫–æ–¥.

        –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å.
        –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞, —Å–∫–∞–∂–∏ —ç—Ç–æ —á–µ—Å—Ç–Ω–æ.
        –í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π –∏–∑ –∫–∞–∫–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ç—ã –≤–∑—è–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

        –ö–û–ù–¢–ï–ö–°–¢ –ò–ó –ö–û–î–û–í–û–ô –ë–ê–ó–´:
        \(context)

        –í–û–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
        \(question)

        –ò–ù–°–¢–†–£–ö–¶–ò–ò:
        1. –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        2. –ù–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –≤–æ–ø—Ä–æ—Å—É
        3. –î–∞–π —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        4. –£–∫–∞–∂–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–Ω–æ–º–µ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö)
        5. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ - —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º

        –û–¢–í–ï–¢:
        """
    }

    private func sendToLLM(prompt: String) async throws -> String {
        // Get API key from settings
        guard let apiKey = ProcessInfo.processInfo.environment["CLAUDE_API_KEY"] ?? UserDefaults.standard.string(forKey: "ClaudeAPIKey"),
              !apiKey.isEmpty else {
            throw RAGError.llmFailed("Claude API key not found")
        }

        // Create Claude API request
        let url = URL(string: "https://api.anthropic.com/v1/messages")!
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue(apiKey, forHTTPHeaderField: "x-api-key")
        request.setValue("2023-06-01", forHTTPHeaderField: "anthropic-version")
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")

        let requestBody: [String: Any] = [
            "model": "claude-3-7-sonnet-20250219",
            "max_tokens": 4096,
            "messages": [
                [
                    "role": "user",
                    "content": prompt
                ]
            ]
        ]

        request.httpBody = try JSONSerialization.data(withJSONObject: requestBody)

        let (data, response) = try await URLSession.shared.data(for: request)

        guard let httpResponse = response as? HTTPURLResponse else {
            throw RAGError.llmFailed("Invalid response")
        }

        guard httpResponse.statusCode == 200 else {
            let errorMessage = String(data: data, encoding: .utf8) ?? "Unknown error"
            throw RAGError.llmFailed("HTTP \(httpResponse.statusCode): \(errorMessage)")
        }

        // Parse Claude response
        let json = try JSONSerialization.jsonObject(with: data) as? [String: Any]
        guard let content = json?["content"] as? [[String: Any]],
              let firstContent = content.first,
              let text = firstContent["text"] as? String else {
            throw RAGError.llmFailed("Failed to parse response")
        }

        return text
    }
}

// MARK: - Comparison Result

struct RAGComparison {
    let question: String
    let withRAG: RAGResponse
    let withoutRAG: String
    let ragProcessingTime: TimeInterval
    let noRAGProcessingTime: TimeInterval

    var analysis: String {
        return """

        üìä –°–†–ê–í–ù–ï–ù–ò–ï RAG vs –ë–ï–ó RAG

        –í–æ–ø—Ä–æ—Å: \(question)

        ‚è± –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:
        ‚Ä¢ –° RAG: \(String(format: "%.2f", ragProcessingTime))s
        ‚Ä¢ –ë–µ–∑ RAG: \(String(format: "%.2f", noRAGProcessingTime))s

        üìö –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: \(withRAG.usedChunks.count)

        üîç –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:
        \(withRAG.usedChunks.enumerated().map { index, chunk in
            "  \(index + 1). \(chunk.chunk.fileName) - \(String(format: "%.1f%%", chunk.similarity * 100))"
        }.joined(separator: "\n"))

        ‚úÖ –û–¢–í–ï–¢ –° RAG —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∏–∑ –∫–æ–¥–∞
        ‚ö†Ô∏è –û–¢–í–ï–¢ –ë–ï–ó RAG –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—â–∏–º –∏–ª–∏ –Ω–µ—Ç–æ—á–Ω—ã–º
        """
    }
}
