//
//  ChatViewModel.swift
//  AIAdventChatV2
//
//  Created by Sergey Markov on 01.10.2025.
//

import Foundation
import Combine

enum ConversationMode {
    case normal
    case collectingRequirements
}

class ChatViewModel: ObservableObject {
    @Published var messages: [Message] = []
    @Published var currentMessage: String = ""
    @Published var isLoading: Bool = false
    @Published var errorMessage: String?
    @Published var conversationMode: ConversationMode = .normal
    @Published var generatedDocument: String?
    @Published var loadingMessage: String = "Claude –ø–µ—á–∞—Ç–∞–µ—Ç..."
    @Published var summarizationProgress: String?

    internal let settings: Settings
    private var cancellables = Set<AnyCancellable>()
    private let huggingFaceService = HuggingFaceService()
    private let claudeService = ClaudeService()
    private let localModelService = LocalModelService()
    private let yandexTrackerService = YandexTrackerService()
    private let periodicTaskService = PeriodicTaskService()

    init(settings: Settings) {
        self.settings = settings
        periodicTaskService.chatViewModel = self
    }

    func startRequirementsCollection() {
        conversationMode = .collectingRequirements
        generatedDocument = nil
        messages.removeAll()

        let initialMessage = Message(
            content: "–†–µ–∂–∏–º —Å–±–æ—Ä–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –Ø –±—É–¥—É –∑–∞–¥–∞–≤–∞—Ç—å –≤–∞–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è. –ö–æ–≥–¥–∞ —Å–æ–±–µ—Ä—É –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ñ–æ—Ä–º–∏—Ä—É—é –ø–æ–ª–Ω–æ–µ –¢–ó.",
            isFromUser: false
        )
        messages.append(initialMessage)
    }

    func switchToNormalMode() {
        conversationMode = .normal
        generatedDocument = nil
    }
    
    func sendMessage() {
        guard !currentMessage.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty else { return }
        guard settings.isConfigured else {
            errorMessage = "API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."
            return
        }

        let userMessage = Message(content: currentMessage, isFromUser: true)
        messages.append(userMessage)

        let messageToSend = currentMessage
        currentMessage = ""
        isLoading = true
        errorMessage = nil

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Yandex Tracker —Å–µ—Ä–≤–∏—Å –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        if settings.isYandexTrackerConfigured && !yandexTrackerService.isConnected {
            Task {
                do {
                    try await yandexTrackerService.configure(
                        orgId: settings.yandexTrackerOrgId,
                        token: settings.yandexTrackerToken
                    )
                } catch {
                    print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Yandex Tracker: \(error.localizedDescription)")
                }
            }
        }

        // –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        switch settings.selectedProvider {
        case .claude:
            sendToClaude(message: messageToSend)
        case .huggingface:
            sendToHuggingFace(message: messageToSend)
        }
    }

    private func sendToHuggingFace(message: String) {
        let _ = Date() // –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–ª—è –º–µ—Ç—Ä–∏–∫

        huggingFaceService.sendRequest(
            model: settings.selectedModel,
            message: message,
            apiKey: settings.huggingFaceApiKey,
            temperature: settings.temperature
        ) { [weak self] result in
            DispatchQueue.main.async {
                self?.isLoading = false

                switch result {
                case .success((let text, let metrics)):
                    let claudeMessage = Message(
                        content: text,
                        isFromUser: false,
                        temperature: self?.settings.temperature,
                        metrics: (
                            responseTime: metrics.responseTime,
                            inputTokens: metrics.inputTokens,
                            outputTokens: metrics.outputTokens,
                            cost: metrics.totalCost,
                            modelName: metrics.modelName
                        )
                    )
                    self?.messages.append(claudeMessage)

                case .failure(let error):
                    self?.handleError("–û—à–∏–±–∫–∞ HuggingFace: \(error.localizedDescription)")
                    print(error)
                }
            }
        }
    }
    
    private func sendToClaude(message: String) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
        if settings.summarizationEnabled && settings.isConfigured {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
            if message.count < settings.summarizationMinLength {
                // –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é
                print("‚è≠Ô∏è –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (\(message.count) —Å–∏–º–≤–æ–ª–æ–≤), –º–∏–Ω–∏–º—É–º: \(settings.summarizationMinLength)")
                loadingMessage = "Claude –ø–µ—á–∞—Ç–∞–µ—Ç..."
                sendToClaudeDirectly(message: message)
                return
            }

            // –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
            switch settings.summarizationProvider {
            case .local:
                summarizeWithLocalModel(message: message)
                return
            case .huggingface:
                if !settings.huggingFaceApiKey.isEmpty {
                    summarizeWithHuggingFace(message: message)
                    return
                } else {
                    print("‚ö†Ô∏è HuggingFace API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é")
                }
            case .claude:
                if !settings.apiKey.isEmpty {
                    summarizeWithClaude(message: message)
                    return
                } else {
                    print("‚ö†Ô∏è Claude API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é")
                }
            }
        }

        // –ï—Å–ª–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –≤–∫–ª—é—á–µ–Ω–∞ –∏–ª–∏ –Ω–µ—Ç –∫–ª—é—á–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø—Ä—è–º—É—é
        sendToClaudeDirectly(message: message)
    }

    private func summarizeWithLocalModel(message: String) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
        loadingMessage = "–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞..."
        summarizationProgress = "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞..."

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
        let systemMessage = Message(
            content: "üîÑ –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –ª–æ–∫–∞–ª—å–Ω–æ (katanemo/Arch-Router-1.5B)...",
            isFromUser: false,
            isSystemMessage: true
        )
        messages.append(systemMessage)

        // –°—É–º–º–∞—Ä–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ª–æ–∫–∞–ª—å–Ω–æ
        localModelService.summarize(
            text: message,
            progressCallback: { [weak self] progress in
                DispatchQueue.main.async {
                    self?.summarizationProgress = progress
                    self?.loadingMessage = "–õ–æ–∫–∞–ª—å–Ω–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è: \(progress)"
                }
            }
        ) { [weak self] result in
            DispatchQueue.main.async {
                guard let self = self else { return }

                switch result {
                case .success(let summarizedText):
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                    if let index = self.messages.firstIndex(where: { $0.id == systemMessage.id }) {
                        let compressionRatio = Int((1.0 - Double(summarizedText.count) / Double(message.count)) * 100)
                        let updatedMessage = Message(
                            content: "‚úÖ –¢–µ–∫—Å—Ç —Å—É–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–æ–∫–∞–ª—å–Ω–æ (—Å–∂–∞—Ç–∏–µ: \(compressionRatio)%) ‚Ä¢ –ú–æ–¥–µ–ª—å: katanemo/Arch-Router-1.5B",
                            isFromUser: false,
                            isSystemMessage: true
                        )
                        self.messages[index] = updatedMessage
                    }

                    print("üìù –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç: \(message.count) —Å–∏–º–≤–æ–ª–æ–≤")
                    print("üìù –°—É–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: \(summarizedText.count) —Å–∏–º–≤–æ–ª–æ–≤")

                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –∏ –º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    self.summarizationProgress = nil
                    self.loadingMessage = "Claude –ø–µ—á–∞—Ç–∞–µ—Ç..."

                    self.sendToClaudeDirectly(message: summarizedText)

                case .failure(let error):
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
                    if let index = self.messages.firstIndex(where: { $0.id == systemMessage.id }) {
                        let errorMessage = Message(
                            content: "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: \(error.localizedDescription). –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç",
                            isFromUser: false,
                            isSystemMessage: true
                        )
                        self.messages[index] = errorMessage
                    }

                    print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: \(error.localizedDescription)")

                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    self.summarizationProgress = nil
                    self.loadingMessage = "Claude –ø–µ—á–∞—Ç–∞–µ—Ç..."

                    self.sendToClaudeDirectly(message: message)
                }
            }
        }
    }

    private func summarizeWithHuggingFace(message: String) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
        loadingMessage = "–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞..."
        summarizationProgress = "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞..."

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
        let systemMessage = Message(
            content: "üîÑ –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é HuggingFace (katanemo/Arch-Router-1.5B)...",
            isFromUser: false,
            isSystemMessage: true
        )
        messages.append(systemMessage)

        // –°–Ω–∞—á–∞–ª–∞ —Å—É–º–º–∞—Ä–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        huggingFaceService.summarize(
            text: message,
            apiKey: settings.huggingFaceApiKey,
            progressCallback: { [weak self] progress in
                DispatchQueue.main.async {
                    self?.summarizationProgress = progress
                    self?.loadingMessage = "–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è: \(progress)"
                }
            }
        ) { [weak self] result in
            DispatchQueue.main.async {
                guard let self = self else { return }

                switch result {
                case .success(let summarizedText):
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                    if let index = self.messages.firstIndex(where: { $0.id == systemMessage.id }) {
                        let compressionRatio = Int((1.0 - Double(summarizedText.count) / Double(message.count)) * 100)
                        let updatedMessage = Message(
                            content: "‚úÖ –¢–µ–∫—Å—Ç —Å—É–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω (—Å–∂–∞—Ç–∏–µ: \(compressionRatio)%) ‚Ä¢ –ú–æ–¥–µ–ª—å: katanemo/Arch-Router-1.5B",
                            isFromUser: false,
                            isSystemMessage: true
                        )
                        self.messages[index] = updatedMessage
                    }

                    print("üìù –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç: \(message.count) —Å–∏–º–≤–æ–ª–æ–≤")
                    print("üìù –°—É–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: \(summarizedText.count) —Å–∏–º–≤–æ–ª–æ–≤")

                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –∏ –º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    self.summarizationProgress = nil
                    self.loadingMessage = "Claude –ø–µ—á–∞—Ç–∞–µ—Ç..."

                    self.sendToClaudeDirectly(message: summarizedText)

                case .failure(let error):
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
                    if let index = self.messages.firstIndex(where: { $0.id == systemMessage.id }) {
                        let errorMessage = Message(
                            content: "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç",
                            isFromUser: false,
                            isSystemMessage: true
                        )
                        self.messages[index] = errorMessage
                    }

                    print("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: \(error.localizedDescription)")

                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    self.summarizationProgress = nil
                    self.loadingMessage = "Claude –ø–µ—á–∞—Ç–∞–µ—Ç..."

                    self.sendToClaudeDirectly(message: message)
                }
            }
        }
    }

    private func summarizeWithClaude(message: String) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
        loadingMessage = "–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞..."
        summarizationProgress = "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞..."

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
        let systemMessage = Message(
            content: "üîÑ –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é Claude (claude-3-7-sonnet-20250219)...",
            isFromUser: false,
            isSystemMessage: true
        )
        messages.append(systemMessage)

        // –°–Ω–∞—á–∞–ª–∞ —Å—É–º–º–∞—Ä–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        claudeService.summarize(
            text: message,
            apiKey: settings.apiKey,
            progressCallback: { [weak self] progress in
                DispatchQueue.main.async {
                    self?.summarizationProgress = progress
                    self?.loadingMessage = "–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è: \(progress)"
                }
            }
        ) { [weak self] result in
            DispatchQueue.main.async {
                guard let self = self else { return }

                switch result {
                case .success(let summarizedText):
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                    if let index = self.messages.firstIndex(where: { $0.id == systemMessage.id }) {
                        let compressionRatio = Int((1.0 - Double(summarizedText.count) / Double(message.count)) * 100)
                        let updatedMessage = Message(
                            content: "‚úÖ –¢–µ–∫—Å—Ç —Å—É–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω (—Å–∂–∞—Ç–∏–µ: \(compressionRatio)%) ‚Ä¢ –ú–æ–¥–µ–ª—å: claude-3-7-sonnet-20250219",
                            isFromUser: false,
                            isSystemMessage: true
                        )
                        self.messages[index] = updatedMessage
                    }

                    print("üìù –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç: \(message.count) —Å–∏–º–≤–æ–ª–æ–≤")
                    print("üìù –°—É–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: \(summarizedText.count) —Å–∏–º–≤–æ–ª–æ–≤")

                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –∏ –º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    self.summarizationProgress = nil
                    self.loadingMessage = "Claude –ø–µ—á–∞—Ç–∞–µ—Ç..."

                    self.sendToClaudeDirectly(message: summarizedText)

                case .failure(let error):
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
                    if let index = self.messages.firstIndex(where: { $0.id == systemMessage.id }) {
                        let errorMessage = Message(
                            content: "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç",
                            isFromUser: false,
                            isSystemMessage: true
                        )
                        self.messages[index] = errorMessage
                    }

                    print("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: \(error.localizedDescription)")

                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    self.summarizationProgress = nil
                    self.loadingMessage = "Claude –ø–µ—á–∞—Ç–∞–µ—Ç..."

                    self.sendToClaudeDirectly(message: message)
                }
            }
        }
    }

    private func sendToClaudeDirectly(message: String) {
        let startTime = Date()

        guard let url = URL(string: "https://api.anthropic.com/v1/messages") else {
            handleError("–ù–µ–≤–µ—Ä–Ω—ã–π URL API")
            return
        }

        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.setValue("2023-06-01", forHTTPHeaderField: "anthropic-version")
        request.setValue("\(settings.apiKey)", forHTTPHeaderField: "x-api-key")
        request.timeoutInterval = 60.0 // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è tool use
        
        let systemPrompt: String
        if conversationMode == .collectingRequirements {
            systemPrompt = """
                –í—ã - –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫, —Å–æ–±–∏—Ä–∞—é—â–∏–π —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è. –í–°–ï–ì–î–ê –æ—Ç–≤–µ—á–∞–π—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.

                –í–ê–ñ–ù–û: –ó–∞–¥–∞–≤–∞–π—Ç–µ –¢–û–õ–¨–ö–û –û–î–ò–ù –≤–æ–ø—Ä–æ—Å –∑–∞ —Ä–∞–∑. –ù–µ –∑–∞–¥–∞–≤–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.

                –í–∞—à–∞ –∑–∞–¥–∞—á–∞:
                1. –ó–∞–¥–∞–≤–∞–π—Ç–µ –ø–æ –æ–¥–Ω–æ–º—É —É—Ç–æ—á–Ω—è—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
                2. –°–æ–±–∏—Ä–∞–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ: —Ü–µ–ª—è—Ö, —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏, –∞—É–¥–∏—Ç–æ—Ä–∏–∏, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö, —Å—Ä–æ–∫–∞—Ö, –±—é–¥–∂–µ—Ç–µ
                3. –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–¥–∞–≤–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
                4. –ö–æ–≥–¥–∞ —Å–æ–±–µ—Ä–µ—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–º–∏–Ω–∏–º—É–º 5-7 –æ—Ç–≤–µ—Ç–æ–≤), —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ "ready_to_generate": true

                –ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (–ø–æ –æ–¥–Ω–æ–º—É):
                - "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤–∞—à –ø—Ä–æ–µ–∫—Ç?"
                - "–ö–∞–∫–∞—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞?"
                - "–ö—Ç–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ?"
                - "–ö–∞–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å?"

                –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
                {
                    "response": "–¢–û–õ–¨–ö–û –û–î–ò–ù –≤–æ–ø—Ä–æ—Å –∑–¥–µ—Å—å",
                    "collected_info": {
                        "project_name": "–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–ª–∏ null",
                        "goals": "—Ü–µ–ª–∏ –∏–ª–∏ null",
                        "features": ["—Ñ—É–Ω–∫—Ü–∏—è1", "—Ñ—É–Ω–∫—Ü–∏—è2"] –∏–ª–∏ [],
                        "target_audience": "—Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è –∏–ª–∏ null",
                        "technologies": ["—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è1"] –∏–ª–∏ [],
                        "timeline": "—Å—Ä–æ–∫–∏ –∏–ª–∏ null",
                        "budget": "–±—é–¥–∂–µ—Ç –∏–ª–∏ null"
                    },
                    "ready_to_generate": false,
                    "completion_percentage": 30
                }

                –ö–æ–≥–¥–∞ ready_to_generate == true, –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–ª–µ "final_document" —Å –ø–æ–ª–Ω—ã–º –¢–ó –≤ —Ñ–æ—Ä–º–∞—Ç–µ markdown.
                """
        } else {
            // –§–æ—Ä–º–∏—Ä—É–µ–º system prompt –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            let hasTrackerTools = settings.isYandexTrackerConfigured && yandexTrackerService.isConnected
            let hasPeriodicTasks = true // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã

            if hasTrackerTools && hasPeriodicTasks {
                systemPrompt = """
                    –í—ã - –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º Yandex Tracker –∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º –∑–∞–¥–∞—á–∞–º.

                    –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –∑–∞–¥–∞—á–∞—Ö, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ Yandex Tracker, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.

                    –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–ü–∏—à–∏ –º–Ω–µ –ø–æ–≥–æ–¥—É –∫–∞–∂–¥—ã–π —á–∞—Å"), –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á.

                    –î–ª—è –æ–±—ã—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç–≤–µ—á–∞–π—Ç–µ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.
                    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤.
                    """
            } else if hasTrackerTools {
                systemPrompt = """
                    –í—ã - –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º Yandex Tracker.

                    –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –∑–∞–¥–∞—á–∞—Ö, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ Yandex Tracker, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.

                    –î–ª—è –æ–±—ã—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç–≤–µ—á–∞–π—Ç–µ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.
                    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤.
                    """
            } else if hasPeriodicTasks {
                systemPrompt = """
                    –í—ã - –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á.

                    –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–ü–∏—à–∏ –º–Ω–µ –ø–æ–≥–æ–¥—É –∫–∞–∂–¥—ã–π —á–∞—Å", "–ü—Ä–∏—Å—ã–ª–∞–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã —Ä–∞–∑ –≤ —á–∞—Å"), –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á.

                    –î–ª—è –æ–±—ã—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç–≤–µ—á–∞–π—Ç–µ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.
                    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤.
                    """
            } else {
                systemPrompt = """
                    –í—ã - –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.

                    –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º.
                    –ë—É–¥—å—Ç–µ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã –∏ –ø–æ–ª–µ–∑–Ω—ã.
                    """
            }
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        var messagesArray: [[String: String]] = []
        if conversationMode == .collectingRequirements {
            // –í–∫–ª—é—á–∞–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —Å–±–æ—Ä–∞ –¢–ó (–∏ –≤–æ–ø—Ä–æ—Å—ã Claude, –∏ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            for msg in messages {
                messagesArray.append([
                    "role": msg.isFromUser ? "user" : "assistant",
                    "content": msg.content
                ])
            }
        }
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        messagesArray.append([
            "role": "user",
            "content": message
        ])

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –µ—Å–ª–∏ Yandex Tracker –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        var requestBody: [String: Any] = [
            "model": "claude-3-7-sonnet-20250219",
            "max_tokens": 2000,
            "temperature": settings.temperature,
            "system": systemPrompt,
            "messages": messagesArray
        ]
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        var allTools: [ClaudeTool] = []

        // –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã Yandex Tracker –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
        if settings.isYandexTrackerConfigured && yandexTrackerService.isConnected {
            allTools.append(contentsOf: YandexTrackerToolsProvider.getTools())
        }

        // –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã)
        allTools.append(contentsOf: PeriodicTaskToolsProvider.getTools())

        // –§–æ—Ä–º–∏—Ä—É–µ–º JSON –¥–ª—è tools –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        if !allTools.isEmpty {
            let toolsJson = allTools.map { tool in
                [
                    "name": tool.name,
                    "description": tool.description,
                    "input_schema": [
                        "type": "object",
                        "properties": tool.input_schema.properties.mapValues { property in
                            [
                                "type": property.type,
                                "description": property.description
                            ]
                        },
                        "required": tool.input_schema.required ?? []
                    ]
                ]
            }
            requestBody["tools"] = toolsJson
        }
        
        do {
            request.httpBody = try JSONSerialization.data(withJSONObject: requestBody)
        } catch {
            handleError("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: \(error.localizedDescription)")
            return
        }
        
        URLSession.shared.dataTask(with: request) { [weak self] data, response, error in
            let responseTime = Date().timeIntervalSince(startTime)

            DispatchQueue.main.async {
                self?.isLoading = false

                if let error = error {
                    let nsError = error as NSError
                    var errorMessage = "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: \(error.localizedDescription)"

                    switch nsError.code {
                    case -1003:
                        errorMessage = "–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                    case -1001:
                        errorMessage = "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                    case -1009:
                        errorMessage = "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É."
                    case 401:
                        errorMessage = "–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
                    default:
                        errorMessage = "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: \(error.localizedDescription)"
                    }

                    self?.handleError(errorMessage)
                    return
                }

                if let httpResponse = response as? HTTPURLResponse {
                    print("HTTP Status Code: \(httpResponse.statusCode)")
                    print("‚úÖ Response headers: \(httpResponse.allHeaderFields)")

                    if let data = data, let errorString = String(data: data, encoding: .utf8) {
                        print("üìÑ Response body: \(errorString)")
                    }

                    if httpResponse.statusCode == 401 {
                        self?.handleError("–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
                        return
                    } else if httpResponse.statusCode >= 400 {
                        self?.handleError("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: \(httpResponse.statusCode)")
                        return
                    }
                }

                guard let data = data else {
                    self?.handleError("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ")
                    return
                }

                self?.processClaudeResponse(data: data, responseTime: responseTime, originalMessage: message)
            }
        }.resume()
    }
    
    private func processClaudeResponse(data: Data, responseTime: TimeInterval, originalMessage: String) {
        do {
            if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any] {
                if let content = json["content"] as? [[String: Any]] {
                    
                    // –ò–∑–≤–ª–µ–∫–∞–µ–º usage –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    var inputTokens: Int? = nil
                    var outputTokens: Int? = nil
                    var cost: Double? = nil

                    if let usage = json["usage"] as? [String: Any] {
                        inputTokens = usage["input_tokens"] as? Int
                        outputTokens = usage["output_tokens"] as? Int

                        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è Claude 3.7 Sonnet
                        if let input = inputTokens, let output = outputTokens {
                            let inputCost = Double(input) * 0.000003  // $3 per 1M input tokens
                            let outputCost = Double(output) * 0.000015  // $15 per 1M output tokens
                            cost = inputCost + outputCost
                        }
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ tool_use –≤ –æ—Ç–≤–µ—Ç–µ
                    var hasToolUse = false
                    for contentItem in content {
                        if contentItem["type"] as? String == "tool_use" {
                            hasToolUse = true
                            break
                        }
                    }
                    
                    if hasToolUse {
                        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º tool use
                        Task {
                            await handleToolUse(content: content, responseTime: responseTime, inputTokens: inputTokens, outputTokens: outputTokens, cost: cost, originalMessage: originalMessage)
                        }
                    } else {
                        // –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
                        if let firstContent = content.first,
                           let text = firstContent["text"] as? String {
                            
                            if conversationMode == .collectingRequirements {
                                processRequirementsResponse(
                                    text: text,
                                    responseTime: responseTime,
                                    inputTokens: inputTokens,
                                    outputTokens: outputTokens,
                                    cost: cost
                                )
                            } else {
                                let claudeMessage = Message(
                                    content: text,
                                    isFromUser: false,
                                    temperature: settings.temperature,
                                    metrics: (
                                        responseTime: responseTime,
                                        inputTokens: inputTokens,
                                        outputTokens: outputTokens,
                                        cost: cost,
                                        modelName: "claude-3-7-sonnet-20250219"
                                    )
                                )
                                messages.append(claudeMessage)
                            }
                        }
                    }
                } else if let error = json["error"] as? [String: Any],
                          let message = error["message"] as? String {
                    handleError("–û—à–∏–±–∫–∞ API: \(message)")
                } else {
                    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    print("üîç –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç Claude:")
                    print("üìÑ JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: \(json.keys)")
                    if let content = json["content"] {
                        print("üìÑ Content type: \(type(of: content))")
                        print("üìÑ Content value: \(content)")
                    }
                    if let rawContent = json["content"] as? [Any] {
                        print("üìÑ Raw content array: \(rawContent)")
                    }
                    
                    // –ü—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
                    if let content = json["content"] as? [Any], let firstContent = content.first as? [String: Any] {
                        if let text = firstContent["text"] as? String {
                            let claudeMessage = Message(
                                content: text,
                                isFromUser: false,
                                temperature: settings.temperature,
                                metrics: (
                                    responseTime: responseTime,
                                    inputTokens: nil,
                                    outputTokens: nil,
                                    cost: nil,
                                    modelName: "claude-3-7-sonnet-20250219"
                                )
                            )
                            messages.append(claudeMessage)
                            return
                        }
                    }
                    
                    handleError("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
                }
            }
        } catch {
            handleError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: \(error.localizedDescription)")
        }
    }

    private func processRequirementsResponse(
        text: String,
        responseTime: TimeInterval,
        inputTokens: Int?,
        outputTokens: Int?,
        cost: Double?
    ) {
        // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç –æ—Ç Claude
        guard let jsonData = text.data(using: .utf8),
              let responseJson = try? JSONSerialization.jsonObject(with: jsonData) as? [String: Any],
              let response = responseJson["response"] as? String else {
            let claudeMessage = Message(
                content: text,
                isFromUser: false,
                temperature: settings.temperature,
                metrics: (
                    responseTime: responseTime,
                    inputTokens: inputTokens,
                    outputTokens: outputTokens,
                    cost: cost,
                    modelName: "claude-3-7-sonnet-20250219"
                )
            )
            messages.append(claudeMessage)
            return
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç Claude –≤ —á–∞—Ç
        let claudeMessage = Message(
            content: response,
            isFromUser: false,
            temperature: settings.temperature,
            metrics: (
                responseTime: responseTime,
                inputTokens: inputTokens,
                outputTokens: outputTokens,
                cost: cost,
                modelName: "claude-3-7-sonnet-20250219"
            )
        )
        messages.append(claudeMessage)

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ—Ç–æ–≤ –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç
        if let readyToGenerate = responseJson["ready_to_generate"] as? Bool,
           readyToGenerate,
           let finalDocument = responseJson["final_document"] as? String {

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
            generatedDocument = finalDocument

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            let documentMessage = Message(
                content: "‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ! –í—ã –º–æ–∂–µ—Ç–µ –µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å.",
                isFromUser: false
            )
            messages.append(documentMessage)
        }

        // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        if let percentage = responseJson["completion_percentage"] as? Int {
            print("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±–æ—Ä–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π: \(percentage)%")
        }
    }
    
    private func handleToolUse(
        content: [[String: Any]],
        responseTime: TimeInterval,
        inputTokens: Int?,
        outputTokens: Int?,
        cost: Double?,
        originalMessage: String
    ) async {
        print("üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ tool_use –æ—Ç Claude")
        print("üìÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ content —ç–ª–µ–º–µ–Ω—Ç–æ–≤: \(content.count)")
        
        // –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        var toolResults: [[String: Any]] = []
        
        for (index, contentItem) in content.enumerated() {
            print("üìÑ Content[\(index)]: \(contentItem)")
            
            if contentItem["type"] as? String == "tool_use",
               let toolUseId = contentItem["id"] as? String,
               let toolName = contentItem["name"] as? String,
               let toolInput = contentItem["input"] as? [String: Any] {
                
                print("üîß –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: \(toolName)")
                print("üìÑ ID: \(toolUseId)")
                print("üìÑ Input: \(toolInput)")
                
                do {
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º
                    let result: String

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç Yandex Tracker –∏–ª–∏ Periodic Task
                    if toolName.hasPrefix("get_yandex_tracker") {
                        // Yandex Tracker –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
                        result = try await YandexTrackerToolsProvider.executeTool(
                            name: toolName,
                            input: toolInput,
                            trackerService: yandexTrackerService
                        )
                    } else if toolName.contains("weather") || toolName.contains("task") {
                        // Periodic Task –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
                        result = PeriodicTaskToolsProvider.executeTool(
                            name: toolName,
                            input: toolInput,
                            periodicTaskService: periodicTaskService
                        )
                    } else {
                        result = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: \(toolName)"
                    }

                    print("‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    print("üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç: \(result)")

                    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    toolResults.append([
                        "type": "tool_result",
                        "tool_use_id": toolUseId,
                        "content": result,
                        "is_error": false
                    ])

                } catch {
                    print("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: \(error.localizedDescription)")

                    // –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                    toolResults.append([
                        "type": "tool_result",
                        "tool_use_id": toolUseId,
                        "content": "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: \(error.localizedDescription)",
                        "is_error": true
                    ])
                }
            }
        }
        
        print("üìÑ –ò—Ç–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: \(toolResults.count)")
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ Claude
        await sendToolResultsToClaude(
            toolResults: toolResults,
            originalMessage: originalMessage,
            responseTime: responseTime,
            inputTokens: inputTokens,
            outputTokens: outputTokens,
            cost: cost
        )
    }
    
    private func sendToolResultsToClaude(
        toolResults: [[String: Any]],
        originalMessage: String,
        responseTime: TimeInterval,
        inputTokens: Int?,
        outputTokens: Int?,
        cost: Double?
    ) async {
        print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ Claude")
        print("üìÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: \(toolResults.count)")
        print("üìÑ –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: \(originalMessage)")
        
        guard let url = URL(string: "https://api.anthropic.com/v1/messages") else {
            handleError("–ù–µ–≤–µ—Ä–Ω—ã–π URL API")
            return
        }

        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.setValue("2023-06-01", forHTTPHeaderField: "anthropic-version")
        request.setValue("\(settings.apiKey)", forHTTPHeaderField: "x-api-key")
        request.timeoutInterval = 60.0

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        var messagesArray: [[String: Any]] = []
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        let recentMessages = Array(messages.suffix(4)) // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Å–æ–æ–±—â–µ–Ω–∏—è
        print("üìÑ –î–æ–±–∞–≤–ª—è–µ–º \(recentMessages.count) –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
        
        for msg in recentMessages {
            messagesArray.append([
                "role": msg.isFromUser ? "user" : "assistant",
                "content": msg.content
            ])
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏–∏)
        if !recentMessages.contains(where: { $0.content == originalMessage && $0.isFromUser }) {
            print("üìÑ –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            messagesArray.append([
                "role": "user",
                "content": originalMessage
            ])
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        for toolResult in toolResults {
            print("üìÑ –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: \(toolResult)")
            // tool_result –Ω–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ messages - —ç—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
            // –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –∏—Ö –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        var finalMessage = originalMessage + "\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:\n"
        
        for toolResult in toolResults {
            if let content = toolResult["content"] as? String {
                finalMessage += "\n\(content)\n"
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        messagesArray.append([
            "role": "user",
            "content": finalMessage
        ])

        let requestBody: [String: Any] = [
            "model": "claude-3-7-sonnet-20250219",
            "max_tokens": 2000,
            "temperature": settings.temperature,
            "system": "–í—ã - –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º Yandex Tracker. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ.",
            "messages": messagesArray
        ]
        
        print("üìÑ –ò—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: \(messagesArray.count)")

        do {
            request.httpBody = try JSONSerialization.data(withJSONObject: requestBody)
        } catch {
            handleError("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: \(error.localizedDescription)")
            return
        }

        URLSession.shared.dataTask(with: request) { [weak self] data, response, error in
            DispatchQueue.main.async {
                self?.isLoading = false

                if let error = error {
                    print("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: \(error.localizedDescription)")
                    self?.handleError("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: \(error.localizedDescription)")
                    return
                }

                guard let data = data else {
                    print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç Claude")
                    self?.handleError("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ")
                    return
                }

                if let httpResponse = response as? HTTPURLResponse {
                    print("üìä HTTP —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –æ—Ç Claude: \(httpResponse.statusCode)")
                    if httpResponse.statusCode >= 400 {
                        if let responseString = String(data: data, encoding: .utf8) {
                            print("‚ùå –û—à–∏–±–∫–∞ HTTP: \(responseString)")
                        }
                    }
                }

                print("üìÑ –ü–æ–ª—É—á–µ–Ω —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Claude, —Ä–∞–∑–º–µ—Ä: \(data.count) –±–∞–π—Ç")

                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Claude
                self?.processFinalClaudeResponse(data: data, responseTime: responseTime, inputTokens: inputTokens, outputTokens: outputTokens, cost: cost)
            }
        }.resume()
    }
    
    private func processFinalClaudeResponse(
        data: Data,
        responseTime: TimeInterval,
        inputTokens: Int?,
        outputTokens: Int?,
        cost: Double?
    ) {
        do {
            if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any] {
                print("üîç –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Claude:")
                print("üìÑ JSON –∫–ª—é—á–∏: \(json.keys)")
                
                if let content = json["content"] as? [[String: Any]],
                   let firstContent = content.first,
                   let text = firstContent["text"] as? String {
                    
                    print("üìÑ –ù–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç: \(text)")
                    
                    let claudeMessage = Message(
                        content: text,
                        isFromUser: false,
                        temperature: settings.temperature,
                        metrics: (
                            responseTime: responseTime,
                            inputTokens: inputTokens,
                            outputTokens: outputTokens,
                            cost: cost,
                            modelName: "claude-3-7-sonnet-20250219"
                        )
                    )
                    messages.append(claudeMessage)
                } else {
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –∏–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞")
                    print("üìÑ Content: \(json["content"] ?? "nil")")
                    
                    // –ü—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç
                    if let content = json["content"] as? [Any], let firstContent = content.first as? [String: Any] {
                        if let text = firstContent["text"] as? String {
                            print("üìÑ –ù–∞–π–¥–µ–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç: \(text)")
                            let claudeMessage = Message(
                                content: text,
                                isFromUser: false,
                                temperature: settings.temperature,
                                metrics: (
                                    responseTime: responseTime,
                                    inputTokens: inputTokens,
                                    outputTokens: outputTokens,
                                    cost: cost,
                                    modelName: "claude-3-7-sonnet-20250219"
                                )
                            )
                            messages.append(claudeMessage)
                            return
                        }
                    }
                    
                    handleError("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
                }
            } else {
                handleError("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç–≤–µ—Ç")
            }
        } catch {
            handleError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: \(error.localizedDescription)")
        }
    }

    private func handleError(_ message: String) {
        errorMessage = message
        isLoading = false
    }
    
    func clearChat() {
        messages.removeAll()
        errorMessage = nil
    }
}

