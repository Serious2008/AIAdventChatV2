//
//  YandexTrackerTestView.swift
//  AIAdventChatV2
//
//  Test view for Yandex Tracker MCP integration with Agent
//

import SwiftUI

struct YandexTrackerTestView: View {
    @StateObject private var settings = Settings()
    @StateObject private var agent: YandexTrackerAgentViewModel = YandexTrackerAgentViewModel()

    @State private var taskQuery: String = "–°–∫–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á?"
    @State private var showSettings = false

    var body: some View {
        ScrollView {
            VStack(alignment: .leading, spacing: 20) {

                // MARK: - Header
                Text("ü§ñ Yandex Tracker Agent Test")
                    .font(.largeTitle)
                    .bold()

                Divider()

                // MARK: - Configuration Section
                configurationSection

                Divider()

                // MARK: - Task Execution Section
                taskExecutionSection

                Divider()

                // MARK: - Result Section
                resultSection

            }
            .padding()
        }
        .navigationTitle("Yandex Tracker Agent")
    }

    // MARK: - Configuration Section

    private var configurationSection: some View {
        VStack(alignment: .leading, spacing: 12) {
            Text("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
                .font(.headline)

            if settings.isYandexTrackerConfigured {
                HStack {
                    VStack(alignment: .leading, spacing: 4) {
                        Text("Organization ID: \(settings.yandexTrackerOrgId)")
                            .font(.caption)
                            .foregroundColor(.secondary)
                        Text("Token: \(String(settings.yandexTrackerToken.prefix(20)))...")
                            .font(.caption)
                            .foregroundColor(.secondary)
                    }
                    Spacer()
                    Button("–ò–∑–º–µ–Ω–∏—Ç—å") {
                        showSettings = true
                    }
                    .buttonStyle(.borderedProminent)
                }
                .padding()
                .background(Color.green.opacity(0.1))
                .cornerRadius(8)
            } else {
                VStack(alignment: .leading, spacing: 8) {
                    Text("‚ö†Ô∏è Yandex Tracker –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                        .foregroundColor(.orange)
                        .fontWeight(.semibold)

                    Text("–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ Organization ID –∏ OAuth Token")
                        .font(.caption)
                        .foregroundColor(.secondary)

                    Button("–û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏") {
                        showSettings = true
                    }
                    .buttonStyle(.borderedProminent)
                }
                .padding()
                .background(Color.orange.opacity(0.1))
                .cornerRadius(8)
            }

            Button(action: {
                Task {
                    await agent.configure(
                        orgId: settings.yandexTrackerOrgId,
                        token: settings.yandexTrackerToken
                    )
                }
            }) {
                HStack {
                    if agent.isConfiguring {
                        ProgressView()
                            .scaleEffect(0.7)
                            .padding(.trailing, 5)
                    }

                    Text(agent.isConfigured ? "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ" : "–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∞–≥–µ–Ω—Ç–∞")
                }
                .frame(maxWidth: .infinity)
            }
            .buttonStyle(.borderedProminent)
            .disabled(!settings.isYandexTrackerConfigured || agent.isConfiguring)

            if let error = agent.errorMessage {
                Text("‚ùå –û—à–∏–±–∫–∞: \(error)")
                    .foregroundColor(.red)
                    .font(.caption)
            }
        }
        .sheet(isPresented: $showSettings) {
            SettingsView(settings: settings)
        }
    }

    // MARK: - Task Execution Section

    private var taskExecutionSection: some View {
        VStack(alignment: .leading, spacing: 12) {
            Text("üéØ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏")
                .font(.headline)

            Text("–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:")
                .font(.subheadline)
                .foregroundColor(.secondary)

            VStack(alignment: .leading, spacing: 4) {
                exampleQuery("–°–∫–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á?")
                exampleQuery("–ü–æ–ª—É—á–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –∑–∞–¥–∞—á–∞–º")
                exampleQuery("–ü–æ–∫–∞–∂–∏ –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏")
            }
            .font(.caption)
            .foregroundColor(.blue)

            TextField("–ó–∞–¥–∞—á–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–∞", text: $taskQuery, axis: .vertical)
                .textFieldStyle(.roundedBorder)
                .lineLimit(3...6)

            Button(action: {
                Task {
                    await agent.executeTask(task: taskQuery)
                }
            }) {
                HStack {
                    if agent.isExecuting {
                        ProgressView()
                            .scaleEffect(0.7)
                            .padding(.trailing, 5)
                    }

                    Text("‚ñ∂Ô∏è –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É")
                }
                .frame(maxWidth: .infinity)
            }
            .buttonStyle(.borderedProminent)
            .disabled(!agent.isConfigured || taskQuery.isEmpty || agent.isExecuting)
        }
    }

    private func exampleQuery(_ text: String) -> some View {
        Button(action: {
            taskQuery = text
        }) {
            HStack {
                Text("‚Ä¢")
                Text(text)
                Spacer()
            }
        }
        .buttonStyle(.plain)
    }

    // MARK: - Result Section

    private var resultSection: some View {
        VStack(alignment: .leading, spacing: 12) {
            Text("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç")
                .font(.headline)

            if let result = agent.lastResult {
                ScrollView {
                    Text(result)
                        .font(.system(.body, design: .monospaced))
                        .padding()
                        .frame(maxWidth: .infinity, alignment: .leading)
                        .background(Color.secondary.opacity(0.1))
                        .cornerRadius(8)
                }
                .frame(height: 300)

                Button(action: {
                    NSPasteboard.general.clearContents()
                    NSPasteboard.general.setString(result, forType: .string)
                }) {
                    Label("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", systemImage: "doc.on.doc")
                }
            } else {
                Text("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏")
                    .foregroundColor(.secondary)
                    .italic()
            }
        }
    }
}

// MARK: - View Model

@MainActor
class YandexTrackerAgentViewModel: ObservableObject {
    @Published var isConfigured = false
    @Published var isConfiguring = false
    @Published var isExecuting = false
    @Published var errorMessage: String?
    @Published var lastResult: String?

    private var agent: YandexTrackerAgent?

    func configure(orgId: String, token: String) async {
        isConfiguring = true
        errorMessage = nil

        do {
            // –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ UserDefaults (–∏–ª–∏ –º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            // –î–ª—è —Ç–µ—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            let apiKey = "your-api-key-here"

            let newAgent = YandexTrackerAgent(apiKey: apiKey)
            try await newAgent.configure(orgId: orgId, token: token)

            self.agent = newAgent
            self.isConfigured = true

        } catch {
            self.errorMessage = error.localizedDescription
            self.isConfigured = false
        }

        isConfiguring = false
    }

    func executeTask(task: String) async {
        guard let agent = agent else {
            errorMessage = "–ê–≥–µ–Ω—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
            return
        }

        isExecuting = true
        errorMessage = nil
        lastResult = nil

        do {
            let result = try await agent.executeTask(task: task)
            self.lastResult = result

        } catch {
            self.errorMessage = error.localizedDescription
            self.lastResult = "‚ùå –û—à–∏–±–∫–∞: \(error.localizedDescription)"
        }

        isExecuting = false
    }
}

// MARK: - Preview

struct YandexTrackerTestView_Previews: PreviewProvider {
    static var previews: some View {
        NavigationStack {
            YandexTrackerTestView()
        }
    }
}
