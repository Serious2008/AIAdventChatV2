//
//  MultiAgentView.swift
//  AIAdventChatV2
//
//  Created by Claude on 10.10.2025.
//

import SwiftUI

enum AgentMode: String, CaseIterable, Identifiable {
    case plannerImplementer = "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ‚Üí –†–µ–∞–ª–∏–∑–∞—Ç–æ—Ä"
    case solverReviewer = "–†–µ—à–∞—Ç–µ–ª—å ‚Üí –ü—Ä–æ–≤–µ—Ä—è—é—â–∏–π"

    var id: String { self.rawValue }

    var description: String {
        switch self {
        case .plannerImplementer:
            return "–ê–≥–µ–Ω—Ç 1 —Å–æ–∑–¥–∞–µ—Ç –ø–ª–∞–Ω, –ê–≥–µ–Ω—Ç 2 —Ä–µ–∞–ª–∏–∑—É–µ—Ç –µ–≥–æ"
        case .solverReviewer:
            return "–ê–≥–µ–Ω—Ç 1 —Ä–µ—à–∞–µ—Ç –∑–∞–¥–∞—á—É, –ê–≥–µ–Ω—Ç 2 –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ—à–µ–Ω–∏–µ"
        }
    }

    var example: String {
        switch self {
        case .plannerImplementer:
            return "\"–°–æ–∑–¥–∞–π —Å–∏—Å—Ç–µ–º—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\""
        case .solverReviewer:
            return "\"–†–µ—à–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ: 2x + 6 = 14\""
        }
    }
}

struct MultiAgentView: View {
    @ObservedObject var settings: Settings
    @State private var userTask: String = ""
    @State private var isProcessing: Bool = false
    @State private var plannerResult: MultiAgentResult?
    @State private var solverResult: SolverReviewerResult?
    @State private var errorMessage: String?
    @State private var selectedMode: AgentMode = .solverReviewer

    var body: some View {
        VStack(spacing: 0) {
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            HStack {
                Image(systemName: "person.2.fill")
                    .font(.title2)
                    .foregroundColor(.purple)
                Text("Multi-Agent System")
                    .font(.largeTitle)
                    .fontWeight(.bold)
                Spacer()
            }
            .padding()
            .background(Color(NSColor.controlBackgroundColor))

            Divider()

            ScrollView {
                VStack(alignment: .leading, spacing: 20) {
                    // –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞
                    VStack(alignment: .leading, spacing: 12) {
                        Text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã")
                            .font(.headline)
                            .fontWeight(.bold)

                        Picker("–†–µ–∂–∏–º", selection: $selectedMode) {
                            ForEach(AgentMode.allCases) { mode in
                                Text(mode.rawValue).tag(mode)
                            }
                        }
                        .pickerStyle(SegmentedPickerStyle())
                        .onChange(of: selectedMode) { _ in
                            // –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞
                            plannerResult = nil
                            solverResult = nil
                            errorMessage = nil
                        }

                        // –û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞
                        HStack(spacing: 8) {
                            Image(systemName: "info.circle.fill")
                                .foregroundColor(.blue)
                            Text(selectedMode.description)
                                .font(.caption)
                                .foregroundColor(.secondary)
                        }
                        .padding(12)
                        .frame(maxWidth: .infinity, alignment: .leading)
                        .background(Color.blue.opacity(0.1))
                        .cornerRadius(8)
                    }
                    .padding()
                    .background(Color(NSColor.controlBackgroundColor))
                    .cornerRadius(12)

                    // –û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
                    if selectedMode == .plannerImplementer {
                        PlannerImplementerInfoView()
                    } else {
                        SolverReviewerInfoView()
                    }

                    // –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∑–∞–¥–∞—á–∏
                    VStack(alignment: .leading, spacing: 8) {
                        Text("–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É")
                            .font(.headline)
                            .fontWeight(.bold)

                        TextEditor(text: $userTask)
                            .frame(minHeight: 120)
                            .padding(8)
                            .background(Color(NSColor.textBackgroundColor))
                            .cornerRadius(8)
                            .overlay(
                                RoundedRectangle(cornerRadius: 8)
                                    .stroke(Color.purple.opacity(0.3), lineWidth: 1)
                            )

                        Text("–ü—Ä–∏–º–µ—Ä: \(selectedMode.example)")
                            .font(.caption)
                            .foregroundColor(.secondary)
                    }

                    // –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞
                    Button(action: {
                        executeTask()
                    }) {
                        HStack {
                            if isProcessing {
                                ProgressView()
                                    .scaleEffect(0.8)
                                    .padding(.trailing, 4)
                            }
                            Text(isProcessing ? "–ê–≥–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç..." : "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Multi-Agent")
                                .fontWeight(.semibold)
                        }
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(userTask.isEmpty || isProcessing ? Color.gray : Color.purple)
                        .foregroundColor(.white)
                        .cornerRadius(10)
                    }
                    .disabled(userTask.isEmpty || isProcessing || !settings.isConfigured)
                    .buttonStyle(.plain)

                    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    if let result = plannerResult {
                        PlannerResultView(result: result)
                    }

                    if let result = solverResult {
                        SolverResultView(result: result)
                    }

                    // –û—à–∏–±–∫–∏
                    if let error = errorMessage {
                        HStack {
                            Image(systemName: "exclamationmark.triangle.fill")
                                .foregroundColor(.red)
                            Text(error)
                                .foregroundColor(.red)
                                .font(.caption)
                        }
                        .padding()
                        .background(Color.red.opacity(0.1))
                        .cornerRadius(8)
                    }
                }
                .padding()
            }
        }
    }

    private func executeTask() {
        errorMessage = nil
        isProcessing = true
        plannerResult = nil
        solverResult = nil

        switch selectedMode {
        case .plannerImplementer:
            let service = MultiAgentService(apiKey: settings.apiKey, temperature: settings.temperature)
            service.executeMultiAgentTask(userTask: userTask) { taskResult in
                DispatchQueue.main.async {
                    isProcessing = false
                    switch taskResult {
                    case .success(let data):
                        plannerResult = data
                    case .failure(let error):
                        errorMessage = error.localizedDescription
                    }
                }
            }

        case .solverReviewer:
            let service = SolverReviewerService(apiKey: settings.apiKey, temperature: settings.temperature)
            service.executeSolverReviewerTask(userTask: userTask) { taskResult in
                DispatchQueue.main.async {
                    isProcessing = false
                    switch taskResult {
                    case .success(let data):
                        solverResult = data
                    case .failure(let error):
                        errorMessage = error.localizedDescription
                    }
                }
            }
        }
    }
}

// MARK: - Info Views

struct PlannerImplementerInfoView: View {
    var body: some View {
        VStack(alignment: .leading, spacing: 8) {
            HStack {
                Image(systemName: "person.2.circle.fill")
                    .foregroundColor(.blue)
                Text("–†–µ–∂–∏–º: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ‚Üí –†–µ–∞–ª–∏–∑–∞—Ç–æ—Ä")
                    .font(.headline)
                    .fontWeight(.bold)
            }

            VStack(alignment: .leading, spacing: 8) {
                AgentDescriptionRow(
                    emoji: "ü§ñ",
                    title: "–ê–≥–µ–Ω—Ç-–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫",
                    description: "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É –∏ —Å–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω"
                )

                AgentDescriptionRow(
                    emoji: "üõ†Ô∏è",
                    title: "–ê–≥–µ–Ω—Ç-–†–µ–∞–ª–∏–∑–∞—Ç–æ—Ä",
                    description: "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–ª–∞–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è"
                )
            }
            .padding(.leading, 8)
        }
        .padding()
        .background(Color.blue.opacity(0.1))
        .cornerRadius(12)
    }
}

struct SolverReviewerInfoView: View {
    var body: some View {
        VStack(alignment: .leading, spacing: 8) {
            HStack {
                Image(systemName: "person.2.circle.fill")
                    .foregroundColor(.green)
                Text("–†–µ–∂–∏–º: –†–µ—à–∞—Ç–µ–ª—å ‚Üí –ü—Ä–æ–≤–µ—Ä—è—é—â–∏–π")
                    .font(.headline)
                    .fontWeight(.bold)
            }

            VStack(alignment: .leading, spacing: 8) {
                AgentDescriptionRow(
                    emoji: "üí°",
                    title: "–ê–≥–µ–Ω—Ç-–†–µ—à–∞—Ç–µ–ª—å",
                    description: "–†–µ—à–∞–µ—Ç –∑–∞–¥–∞—á—É –∏ –¥–∞–µ—Ç –ø–æ–ª–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ"
                )

                AgentDescriptionRow(
                    emoji: "üîç",
                    title: "–ê–≥–µ–Ω—Ç-–ü—Ä–æ–≤–µ—Ä—è—é—â–∏–π",
                    description: "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ—à–µ–Ω–∏–µ, –Ω–∞—Ö–æ–¥–∏—Ç –æ—à–∏–±–∫–∏, –¥–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
                )
            }
            .padding(.leading, 8)
        }
        .padding()
        .background(Color.green.opacity(0.1))
        .cornerRadius(12)
    }
}

struct AgentDescriptionRow: View {
    let emoji: String
    let title: String
    let description: String

    var body: some View {
        HStack(alignment: .top, spacing: 8) {
            Text(emoji)
                .font(.headline)
            VStack(alignment: .leading, spacing: 4) {
                Text(title)
                    .fontWeight(.semibold)
                Text(description)
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
        }
    }
}

// MARK: - Planner Result View (existing)

struct PlannerResultView: View {
    let result: MultiAgentResult

    var body: some View {
        VStack(alignment: .leading, spacing: 16) {
            // –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            HStack {
                Image(systemName: "checkmark.circle.fill")
                    .foregroundColor(.green)
                    .font(.title2)
                Text("–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
                    .font(.headline)
                    .fontWeight(.bold)
                Spacer()
                Text(String(format: "%.2fs", result.totalTime))
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
            .padding()
            .background(Color.green.opacity(0.1))
            .cornerRadius(12)

            // –ê–≥–µ–Ω—Ç 1: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
            AgentResultCard(
                title: "ü§ñ –ê–≥–µ–Ω—Ç-–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫",
                subtitle: "–ê–Ω–∞–ª–∏–∑ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
                content: result.plannerResponse,
                metrics: result.plannerMetrics,
                color: .blue
            )

            // –ü–ª–∞–Ω (–µ—Å–ª–∏ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω)
            if let plan = result.plannerPlan {
                PlanCard(plan: plan)
            }

            // –ê–≥–µ–Ω—Ç 2: –†–µ–∞–ª–∏–∑–∞—Ç–æ—Ä
            AgentResultCard(
                title: "üõ†Ô∏è –ê–≥–µ–Ω—Ç-–†–µ–∞–ª–∏–∑–∞—Ç–æ—Ä",
                subtitle: "–†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏—è",
                content: result.implementerResponse,
                metrics: result.implementerMetrics,
                color: .purple
            )

            // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è (–µ—Å–ª–∏ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–∞)
            if let implementation = result.implementation {
                ImplementationCard(implementation: implementation)
            }
        }
    }
}

// MARK: - Solver Result View (new)

struct SolverResultView: View {
    let result: SolverReviewerResult

    var body: some View {
        VStack(alignment: .leading, spacing: 16) {
            // –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            HStack {
                Image(systemName: "checkmark.circle.fill")
                    .foregroundColor(.green)
                    .font(.title2)
                Text("–ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞!")
                    .font(.headline)
                    .fontWeight(.bold)
                Spacer()
                Text(String(format: "%.2fs", result.totalTime))
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
            .padding()
            .background(Color.green.opacity(0.1))
            .cornerRadius(12)

            // –ê–≥–µ–Ω—Ç 1: –†–µ—à–∞—Ç–µ–ª—å
            AgentResultCard(
                title: "üí° –ê–≥–µ–Ω—Ç-–†–µ—à–∞—Ç–µ–ª—å",
                subtitle: "–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏",
                content: result.solverResponse,
                metrics: result.solverMetrics,
                color: .blue
            )

            // –†–µ—à–µ–Ω–∏–µ (–µ—Å–ª–∏ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ)
            if let solution = result.solution {
                SolutionCard(solution: solution)
            }

            // –ê–≥–µ–Ω—Ç 2: –ü—Ä–æ–≤–µ—Ä—è—é—â–∏–π
            AgentResultCard(
                title: "üîç –ê–≥–µ–Ω—Ç-–ü—Ä–æ–≤–µ—Ä—è—é—â–∏–π",
                subtitle: "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∫—Ä–∏—Ç–∏–∫–∞",
                content: result.reviewerResponse,
                metrics: result.reviewerMetrics,
                color: .orange
            )

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ (–µ—Å–ª–∏ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–∞)
            if let review = result.review {
                ReviewCard(review: review)
            }
        }
    }
}

// MARK: - Solution Card

struct SolutionCard: View {
    let solution: AgentSolution

    var body: some View {
        VStack(alignment: .leading, spacing: 12) {
            Text("üí° –†–µ—à–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞")
                .font(.headline)
                .fontWeight(.bold)

            VStack(alignment: .leading, spacing: 8) {
                SectionView(title: "–û—Ç–≤–µ—Ç", content: solution.solution)

                Divider()

                SectionView(title: "–ü–æ–¥—Ö–æ–¥", content: solution.approach)

                Divider()

                SectionView(title: "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ", content: solution.explanation)

                if let code = solution.code {
                    Divider()

                    VStack(alignment: .leading, spacing: 4) {
                        Text("–ö–æ–¥")
                            .font(.subheadline)
                            .fontWeight(.semibold)

                        Text(code)
                            .font(.system(.body, design: .monospaced))
                            .padding(12)
                            .frame(maxWidth: .infinity, alignment: .leading)
                            .background(Color(NSColor.controlColor))
                            .cornerRadius(8)
                    }
                }
            }
        }
        .padding()
        .background(Color.blue.opacity(0.05))
        .cornerRadius(12)
    }
}

// MARK: - Review Card

struct ReviewCard: View {
    let review: AgentReview

    var body: some View {
        VStack(alignment: .leading, spacing: 12) {
            HStack {
                Text("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—à–µ–Ω–∏—è")
                    .font(.headline)
                    .fontWeight(.bold)
                Spacer()
                VerdictBadge(verdict: review.verdict)
            }

            VStack(alignment: .leading, spacing: 12) {
                // –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
                HStack(alignment: .top, spacing: 8) {
                    Image(systemName: "text.quote")
                        .foregroundColor(.purple)
                    VStack(alignment: .leading, spacing: 4) {
                        Text("–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞")
                            .font(.subheadline)
                            .fontWeight(.semibold)
                        Text(review.overall_assessment)
                    }
                }
                .padding()
                .background(Color.purple.opacity(0.1))
                .cornerRadius(8)

                // –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
                if !review.strengths.isEmpty {
                    VStack(alignment: .leading, spacing: 4) {
                        HStack {
                            Image(systemName: "checkmark.circle.fill")
                                .foregroundColor(.green)
                            Text("–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã")
                                .font(.subheadline)
                                .fontWeight(.semibold)
                        }

                        ForEach(review.strengths, id: \.self) { strength in
                            HStack(alignment: .top, spacing: 8) {
                                Text("‚úì")
                                    .foregroundColor(.green)
                                Text(strength)
                            }
                        }
                    }
                    .padding()
                    .background(Color.green.opacity(0.05))
                    .cornerRadius(8)
                }

                // –°–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
                if !review.weaknesses.isEmpty {
                    VStack(alignment: .leading, spacing: 4) {
                        HStack {
                            Image(systemName: "exclamationmark.triangle.fill")
                                .foregroundColor(.orange)
                            Text("–°–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã")
                                .font(.subheadline)
                                .fontWeight(.semibold)
                        }

                        ForEach(review.weaknesses, id: \.self) { weakness in
                            HStack(alignment: .top, spacing: 8) {
                                Text("‚ö†")
                                    .foregroundColor(.orange)
                                Text(weakness)
                            }
                        }
                    }
                    .padding()
                    .background(Color.orange.opacity(0.05))
                    .cornerRadius(8)
                }

                // –û—à–∏–±–∫–∏
                if let errors = review.errors_found, !errors.isEmpty {
                    VStack(alignment: .leading, spacing: 4) {
                        HStack {
                            Image(systemName: "xmark.circle.fill")
                                .foregroundColor(.red)
                            Text("–ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏")
                                .font(.subheadline)
                                .fontWeight(.semibold)
                        }

                        ForEach(errors, id: \.self) { error in
                            HStack(alignment: .top, spacing: 8) {
                                Text("‚úó")
                                    .foregroundColor(.red)
                                Text(error)
                            }
                        }
                    }
                    .padding()
                    .background(Color.red.opacity(0.05))
                    .cornerRadius(8)
                }

                // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                if !review.suggestions.isEmpty {
                    VStack(alignment: .leading, spacing: 4) {
                        HStack {
                            Image(systemName: "lightbulb.fill")
                                .foregroundColor(.blue)
                            Text("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é")
                                .font(.subheadline)
                                .fontWeight(.semibold)
                        }

                        ForEach(review.suggestions, id: \.self) { suggestion in
                            HStack(alignment: .top, spacing: 8) {
                                Text("üí°")
                                Text(suggestion)
                            }
                        }
                    }
                    .padding()
                    .background(Color.blue.opacity(0.05))
                    .cornerRadius(8)
                }

                // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
                if let corrected = review.corrected_solution {
                    VStack(alignment: .leading, spacing: 4) {
                        HStack {
                            Image(systemName: "checkmark.seal.fill")
                                .foregroundColor(.green)
                            Text("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ")
                                .font(.subheadline)
                                .fontWeight(.semibold)
                        }

                        Text(corrected)
                            .padding(12)
                            .frame(maxWidth: .infinity, alignment: .leading)
                            .background(Color(NSColor.controlColor))
                            .cornerRadius(8)
                    }
                }
            }
        }
        .padding()
        .background(Color.orange.opacity(0.05))
        .cornerRadius(12)
    }
}

struct VerdictBadge: View {
    let verdict: String

    var color: Color {
        switch verdict.lowercased() {
        case "correct":
            return .green
        case "incorrect":
            return .red
        case "partially_correct":
            return .orange
        default:
            return .gray
        }
    }

    var icon: String {
        switch verdict.lowercased() {
        case "correct":
            return "checkmark.circle.fill"
        case "incorrect":
            return "xmark.circle.fill"
        case "partially_correct":
            return "exclamationmark.circle.fill"
        default:
            return "questionmark.circle.fill"
        }
    }

    var text: String {
        switch verdict.lowercased() {
        case "correct":
            return "–ü—Ä–∞–≤–∏–ª—å–Ω–æ"
        case "incorrect":
            return "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ"
        case "partially_correct":
            return "–ß–∞—Å—Ç–∏—á–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ"
        default:
            return verdict
        }
    }

    var body: some View {
        HStack(spacing: 4) {
            Image(systemName: icon)
            Text(text)
                .fontWeight(.semibold)
        }
        .font(.caption)
        .padding(.horizontal, 10)
        .padding(.vertical, 6)
        .background(color.opacity(0.2))
        .foregroundColor(color)
        .cornerRadius(8)
    }
}




