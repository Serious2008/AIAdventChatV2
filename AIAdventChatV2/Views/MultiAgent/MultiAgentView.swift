//
//  MultiAgentView.swift
//  AIAdventChatV2
//
//  Created by Claude on 10.10.2025.
//

import SwiftUI

struct MultiAgentView: View {
    @ObservedObject var settings: Settings
    @State private var userTask: String = ""
    @State private var isProcessing: Bool = false
    @State private var result: MultiAgentResult?
    @State private var errorMessage: String?

    private let multiAgentService: MultiAgentService

    init(settings: Settings) {
        self.settings = settings
        self.multiAgentService = MultiAgentService(
            apiKey: settings.apiKey,
            temperature: settings.temperature
        )
    }

    var body: some View {
        VStack(spacing: 0) {
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            HStack {
                Image(systemName: "person.2.fill")
                    .font(.title2)
                    .foregroundColor(.purple)
                Text("Multi-Agent System")
                    .font(.largeTitle)
                    .fontWeight(.bold)
                Spacer()
            }
            .padding()
            .background(Color(NSColor.controlBackgroundColor))

            Divider()

            ScrollView {
                VStack(alignment: .leading, spacing: 20) {
                    // –û–ø–∏—Å–∞–Ω–∏–µ
                    VStack(alignment: .leading, spacing: 8) {
                        HStack {
                            Image(systemName: "info.circle.fill")
                                .foregroundColor(.blue)
                            Text("–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                                .font(.headline)
                                .fontWeight(.bold)
                        }

                        Text("–°–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–≤–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–∞:")
                            .foregroundColor(.secondary)

                        VStack(alignment: .leading, spacing: 8) {
                            HStack(alignment: .top, spacing: 8) {
                                Text("ü§ñ 1.")
                                    .font(.headline)
                                VStack(alignment: .leading, spacing: 4) {
                                    Text("–ê–≥–µ–Ω—Ç-–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫")
                                        .fontWeight(.semibold)
                                    Text("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É –∏ —Å–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π")
                                        .font(.caption)
                                        .foregroundColor(.secondary)
                                }
                            }

                            HStack(alignment: .top, spacing: 8) {
                                Text("üõ†Ô∏è 2.")
                                    .font(.headline)
                                VStack(alignment: .leading, spacing: 4) {
                                    Text("–ê–≥–µ–Ω—Ç-–†–µ–∞–ª–∏–∑–∞—Ç–æ—Ä")
                                        .fontWeight(.semibold)
                                    Text("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–ª–∞–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è")
                                        .font(.caption)
                                        .foregroundColor(.secondary)
                                }
                            }
                        }
                        .padding(.leading, 8)
                    }
                    .padding()
                    .background(Color.blue.opacity(0.1))
                    .cornerRadius(12)

                    // –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∑–∞–¥–∞—á–∏
                    VStack(alignment: .leading, spacing: 8) {
                        Text("–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É")
                            .font(.headline)
                            .fontWeight(.bold)

                        TextEditor(text: $userTask)
                            .frame(minHeight: 120)
                            .padding(8)
                            .background(Color(NSColor.textBackgroundColor))
                            .cornerRadius(8)
                            .overlay(
                                RoundedRectangle(cornerRadius: 8)
                                    .stroke(Color.blue.opacity(0.3), lineWidth: 1)
                            )

                        Text("–ü—Ä–∏–º–µ—Ä: \"–°–æ–∑–¥–∞–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞ —á–∏—Å–µ–ª\"")
                            .font(.caption)
                            .foregroundColor(.secondary)
                    }

                    // –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞
                    Button(action: {
                        executeTask()
                    }) {
                        HStack {
                            if isProcessing {
                                ProgressView()
                                    .scaleEffect(0.8)
                                    .padding(.trailing, 4)
                            }
                            Text(isProcessing ? "–ê–≥–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç..." : "–ó–∞–ø—É—Å—Ç–∏—Ç—å Multi-Agent")
                                .fontWeight(.semibold)
                        }
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(userTask.isEmpty || isProcessing ? Color.gray : Color.purple)
                        .foregroundColor(.white)
                        .cornerRadius(10)
                    }
                    .disabled(userTask.isEmpty || isProcessing || !settings.isConfigured)
                    .buttonStyle(.plain)

                    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    if let result = result {
                        ResultView(result: result)
                    }

                    // –û—à–∏–±–∫–∏
                    if let error = errorMessage {
                        HStack {
                            Image(systemName: "exclamationmark.triangle.fill")
                                .foregroundColor(.red)
                            Text(error)
                                .foregroundColor(.red)
                                .font(.caption)
                        }
                        .padding()
                        .background(Color.red.opacity(0.1))
                        .cornerRadius(8)
                    }
                }
                .padding()
            }
        }
    }

    private func executeTask() {
        errorMessage = nil
        isProcessing = true

        let service = MultiAgentService(apiKey: settings.apiKey, temperature: settings.temperature)

        service.executeMultiAgentTask(userTask: userTask) { taskResult in
            DispatchQueue.main.async {
                isProcessing = false

                switch taskResult {
                case .success(let data):
                    result = data
                case .failure(let error):
                    errorMessage = error.localizedDescription
                }
            }
        }
    }
}
